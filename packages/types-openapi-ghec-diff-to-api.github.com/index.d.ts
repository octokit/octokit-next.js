/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = T | U extends object
  ? (Without<T, U> & U) | (Without<U, T> & T)
  : T | U;
type OneOf<T extends any[]> = T extends [infer Only]
  ? Only
  : T extends [infer A, infer B, ...infer Rest]
  ? OneOf<[XOR<A, B>, ...Rest]>
  : never;

export interface paths {
  "/enterprises/{enterprise}/actions/oidc/customization/issuer": {
    /**
     * Set the GitHub Actions OIDC custom issuer policy for an enterprise
     * @description Sets the GitHub Actions OpenID Connect (OIDC) custom issuer policy for an enterprise.
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     * GitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.
     */
    put: operations["actions/set-actions-oidc-custom-issuer-policy-for-enterprise"];
  };
  "/enterprises/{enterprise}/audit-log": {
    /**
     * Get the audit log for an enterprise
     * @description Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
     */
    get: operations["enterprise-admin/get-audit-log"];
  };
  "/enterprises/{enterprise}/consumed-licenses": {
    /**
     * List enterprise consumed licenses
     * @description Lists the license consumption information for all users, including those from connected servers, associated with an enterprise.
     * To use this endpoint, you must be an enterprise admin, and you must use an access
     * token with the `read:enterprise` scope.
     *
     * **Note:** The license consumption API endpoints for enterprise accounts are currently
     * in Beta and are subject to change.
     */
    get: operations["enterprise-admin/get-consumed-licenses"];
  };
  "/enterprises/{enterprise}/license-sync-status": {
    /**
     * Get a license sync status
     * @description Gets information about the status of a license sync job for an enterprise.
     * To use this endpoint, you must be an enterprise admin, and you must use an access
     * token with the `read:enterprise` scope.
     */
    get: operations["enterprise-admin/get-license-sync-status"];
  };
  "/enterprises/{enterprise}/settings/billing/actions": {
    /**
     * Get GitHub Actions billing for an enterprise
     * @description Gets the summary of the free and paid GitHub Actions minutes used.
     *
     * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
     *
     * The authenticated user must be an enterprise admin.
     */
    get: operations["billing/get-github-actions-billing-ghe"];
  };
  "/enterprises/{enterprise}/settings/billing/packages": {
    /**
     * Get GitHub Packages billing for an enterprise
     * @description Gets the free and paid storage used for GitHub Packages in gigabytes.
     *
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     *
     * The authenticated user must be an enterprise admin.
     */
    get: operations["billing/get-github-packages-billing-ghe"];
  };
  "/enterprises/{enterprise}/settings/billing/shared-storage": {
    /**
     * Get shared storage billing for an enterprise
     * @description Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
     *
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     *
     * The authenticated user must be an enterprise admin.
     */
    get: operations["billing/get-shared-storage-billing-ghe"];
  };
  "/orgs/{org}/actions/oidc/customization/sub": {
    /**
     * Get the customization template for an OIDC subject claim for an organization
     * @description Gets the customization template for an OpenID Connect (OIDC) subject claim.
     * You must authenticate using an access token with the `read:org` scope to use this endpoint.
     * GitHub Apps must have the `organization_administration:write` permission to use this endpoint.
     */
    get: operations["oidc/get-oidc-custom-sub-template-for-org"];
    /**
     * Set the customization template for an OIDC subject claim for an organization
     * @description Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.
     * You must authenticate using an access token with the `write:org` scope to use this endpoint.
     * GitHub Apps must have the `admin:org` permission to use this endpoint.
     */
    put: operations["oidc/update-oidc-custom-sub-template-for-org"];
  };
  "/orgs/{org}/audit-log": {
    /**
     * Get the audit log for an organization
     * @description Gets the audit log for an organization. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/enterprise-cloud@latest//github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization)."
     *
     * This endpoint is available for organizations on GitHub Enterprise Cloud. To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.
     *
     * By default, the response includes up to 30 events from the past three months. Use the `phrase` parameter to filter results and retrieve older events. For example, use the `phrase` parameter with the `created` qualifier to filter events based on when the events occurred. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/enterprise-cloud@latest//organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#searching-the-audit-log)."
     *
     * Use pagination to retrieve fewer or more than 30 events. For more information, see "[Resources in the REST API](https://docs.github.com/enterprise-cloud@latest//rest/overview/resources-in-the-rest-api#pagination)."
     */
    get: operations["orgs/get-audit-log"];
  };
  "/orgs/{org}/credential-authorizations": {
    /**
     * List SAML SSO authorizations for an organization
     * @description Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).
     *
     * An authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://docs.github.com/en/articles/about-authentication-with-saml-single-sign-on).
     */
    get: operations["orgs/list-saml-sso-authorizations"];
  };
  "/orgs/{org}/credential-authorizations/{credential_id}": {
    /**
     * Remove a SAML SSO authorization for an organization
     * @description Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).
     *
     * An authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
     */
    delete: operations["orgs/remove-saml-sso-authorization"];
  };
  "/orgs/{org}/external-group/{group_id}": {
    /**
     * Get an external group
     * @description Displays information about the specific group's usage.  Provides a list of the group's external members as well as a list of teams that this group is connected to.
     *
     * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/enterprise-cloud@latest//github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
     */
    get: operations["teams/external-idp-group-info-for-org"];
  };
  "/orgs/{org}/external-groups": {
    /**
     * List external groups in an organization
     * @description Lists external groups available in an organization. You can query the groups using the `display_name` parameter, only groups with a `group_name` containing the text provided in the `display_name` parameter will be returned.  You can also limit your page results using the `per_page` parameter. GitHub Enterprise Cloud generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
     *
     * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/enterprise-cloud@latest//github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
     */
    get: operations["teams/list-external-idp-groups-for-org"];
  };
  "/orgs/{org}/team-sync/groups": {
    /**
     * List IdP groups for an organization
     * @description Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub Enterprise Cloud generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
     */
    get: operations["teams/list-idp-groups-for-org"];
  };
  "/orgs/{org}/teams/{team_slug}/external-groups": {
    /**
     * List a connection between an external group and a team
     * @description Lists a connection between a team and an external group.
     *
     * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/enterprise-cloud@latest//github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
     */
    get: operations["teams/list-linked-external-idp-groups-to-team-for-org"];
    /**
     * Remove the connection between an external group and a team
     * @description Deletes a connection between a team and an external group.
     *
     * You can manage team membership with your IdP using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/enterprise-cloud@latest//github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     */
    delete: operations["teams/unlink-external-idp-group-from-team-for-org"];
    /**
     * Update the connection between an external group and a team
     * @description Creates a connection between a team and an external group.  Only one external group can be linked to a team.
     *
     * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/enterprise-cloud@latest//github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
     */
    patch: operations["teams/link-external-idp-group-to-team-for-org"];
  };
  "/orgs/{org}/teams/{team_slug}/team-sync/group-mappings": {
    /**
     * List IdP groups for a team
     * @description Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * List IdP groups connected to a team on GitHub Enterprise Cloud.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
     */
    get: operations["teams/list-idp-groups-in-org"];
    /**
     * Create or update IdP group connections
     * @description Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
     */
    patch: operations["teams/create-or-update-idp-group-connections-in-org"];
  };
  "/repos/{owner}/{repo}/actions/oidc/customization/sub": {
    /**
     * Get the opt-out flag of an OIDC subject claim customization for a repository
     * @description Gets the `opt-out` flag of a GitHub Actions OpenID Connect (OIDC) subject claim customization for a repository.
     * You must authenticate using an access token with the `repo` scope to use this
     * endpoint. GitHub Apps must have the `organization_administration:read` permission to use this endpoint.
     */
    get: operations["actions/get-custom-oidc-sub-claim-for-repo"];
    /**
     * Set the opt-in flag of an OIDC subject claim customization for a repository
     * @description Sets the `opt-in` or `opt-out` flag of a GitHub Actions OpenID Connect (OIDC) subject claim customization for a repository.
     * You must authenticate using an access token with the `repo` scope to use this
     * endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     */
    put: operations["actions/set-custom-oidc-sub-claim-for-repo"];
  };
  "/repos/{owner}/{repo}/code-scanning/alerts": {
    /**
     * List code scanning alerts for a repository
     * @description Lists code scanning alerts.
     *
     * To use this endpoint, you must use an access token with the `security_events` scope or, for alerts from public repositories only, an access token with the `public_repo` scope.
     *
     * GitHub Apps must have the `security_events` read
     * permission to use this endpoint.
     *
     * The response includes a `most_recent_instance` object.
     * This provides details of the most recent instance of this alert
     * for the default branch (or for the specified Git reference if you used `ref` in the request).
     */
    get: operations["code-scanning/list-alerts-for-repo"];
  };
  "/scim/v2/organizations/{org}/Users": {
    /**
     * List SCIM provisioned identities
     * @description Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.
     *
     * When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub Enterprise Cloud. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
     *   - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.
     *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
     *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
     *
     * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub Enterprise Cloud account after completing SSO:
     *
     * 1. The user is granted access by the IdP and is not a member of the GitHub Enterprise Cloud organization.
     *
     * 1. The user attempts to access the GitHub Enterprise Cloud organization and initiates the SAML SSO process, and is not currently signed in to their GitHub Enterprise Cloud account.
     *
     * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub Enterprise Cloud account:
     *    - If the user signs in, their GitHub Enterprise Cloud account is linked to this entry.
     *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub Enterprise Cloud organization, and the external identity `null` entry remains in place.
     */
    get: operations["scim/list-provisioned-identities"];
    /**
     * Provision and invite a SCIM user
     * @description Provision organization membership for a user, and send an activation email to the email address.
     */
    post: operations["scim/provision-and-invite-user"];
  };
  "/scim/v2/organizations/{org}/Users/{scim_user_id}": {
    /** Get SCIM provisioning information for a user */
    get: operations["scim/get-provisioning-information-for-user"];
    /**
     * Update a provisioned organization membership
     * @description Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://docs.github.com/enterprise-cloud@latest//rest/reference/scim#update-an-attribute-for-a-scim-user) endpoint instead.
     *
     * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
     *
     * **Warning:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `{scim_user_id}`.
     */
    put: operations["scim/set-information-for-provisioned-user"];
    /** Delete a SCIM user from an organization */
    delete: operations["scim/delete-user-from-org"];
    /**
     * Update an attribute for a SCIM user
     * @description Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
     *
     * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
     *
     * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.
     *
     * ```
     * {
     *   "Operations":[{
     *     "op":"replace",
     *     "value":{
     *       "active":false
     *     }
     *   }]
     * }
     * ```
     */
    patch: operations["scim/update-attribute-for-user"];
  };
  "/teams/{team_id}/team-sync/group-mappings": {
    /**
     * List IdP groups for a team (Legacy)
     * @deprecated
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://docs.github.com/enterprise-cloud@latest//rest/reference/teams#list-idp-groups-for-a-team) endpoint.
     *
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * List IdP groups connected to a team on GitHub Enterprise Cloud.
     */
    get: operations["teams/list-idp-groups-for-legacy"];
    /**
     * Create or update IdP group connections (Legacy)
     * @deprecated
     * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://docs.github.com/enterprise-cloud@latest//rest/reference/teams#create-or-update-idp-group-connections) endpoint.
     *
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
     */
    patch: operations["teams/create-or-update-idp-group-connections-legacy"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    "actions-oidc-custom-issuer-policy-for-enterprise": {
      /**
       * @description Whether the enterprise customer requested a custom issuer URL.
       * @example true
       */
      include_enterprise_slug?: boolean;
    };
    "audit-log-event": {
      /** @description The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). */
      "@timestamp"?: number;
      /** @description The name of the action that was performed, for example `user.login` or `repo.create`. */
      action?: string;
      active?: boolean;
      active_was?: boolean;
      /** @description The actor who performed the action. */
      actor?: string;
      /** @description The id of the actor who performed the action. */
      actor_id?: number;
      actor_location?: {
        country_name?: string;
      };
      data?: {
        [key: string]: unknown | undefined;
      };
      org_id?: number;
      /** @description The username of the account being blocked. */
      blocked_user?: string;
      business?: string;
      config?: Record<string, never>[];
      config_was?: Record<string, never>[];
      content_type?: string;
      /** @description The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). */
      created_at?: number;
      deploy_key_fingerprint?: string;
      /** @description A unique identifier for an audit event. */
      _document_id?: string;
      emoji?: string;
      events?: Record<string, never>[];
      events_were?: Record<string, never>[];
      explanation?: string;
      fingerprint?: string;
      hook_id?: number;
      limited_availability?: boolean;
      message?: string;
      name?: string;
      old_user?: string;
      openssh_public_key?: string;
      org?: string;
      previous_visibility?: string;
      read_only?: boolean;
      /** @description The name of the repository. */
      repo?: string;
      /** @description The name of the repository. */
      repository?: string;
      repository_public?: boolean;
      target_login?: string;
      team?: string;
      /** @description The type of protocol (for example, HTTP or SSH) used to transfer Git data. */
      transport_protocol?: number;
      /** @description A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data. */
      transport_protocol_name?: string;
      /** @description The user that was affected by the action performed (if available). */
      user?: string;
      /** @description The repository visibility, for example `public` or `private`. */
      visibility?: string;
    };
    /**
     * Enterprise Consumed Licenses
     * @description A breakdown of the licenses consumed by an enterprise.
     */
    "get-consumed-licenses": {
      total_seats_consumed?: number;
      total_seats_purchased?: number;
      users?: {
        github_com_login?: string;
        github_com_name?: string | null;
        github_com_profile?: string | null;
        license_type?: string;
        github_com_member_roles?: string[];
        /** @description Deprecated: The most permissive enterprise role for a user. */
        github_com_enterprise_role?: string | null;
        /** @description All enterprise roles for a user. */
        github_com_enterprise_roles?: string[];
        visual_studio_subscription_user?: boolean;
        github_com_verified_domain_emails?: string[];
        github_com_saml_name_id?: string | null;
        enterprise_server_user?: boolean | null;
        enterprise_server_emails?: string[];
        github_com_user?: boolean;
        total_user_accounts?: number;
        enterprise_server_user_ids?: string[];
        github_com_orgs_with_pending_invites?: string[];
        visual_studio_subscription_email?: string | null;
      }[];
    };
    /**
     * License Sync Status
     * @description Information about the status of a license sync job for an enterprise.
     */
    "get-license-sync-status": {
      server_instances?: {
        server_id?: string;
        hostname?: string;
        last_sync?: {
          date?: string;
          status?: string;
          error?: string;
        };
      }[];
    };
    "actions-billing-usage": {
      /** @description The sum of the free and paid GitHub Actions minutes used. */
      total_minutes_used: number;
      /** @description The total paid GitHub Actions minutes used. */
      total_paid_minutes_used: number;
      /** @description The amount of free GitHub Actions minutes available. */
      included_minutes: number;
      minutes_used_breakdown: {
        /** @description Total minutes used on Ubuntu runner machines. */
        UBUNTU?: number;
        /** @description Total minutes used on macOS runner machines. */
        MACOS?: number;
        /** @description Total minutes used on Windows runner machines. */
        WINDOWS?: number;
        /** @description Total minutes used on Ubuntu 4 core runner machines. */
        ubuntu_4_core?: number;
        /** @description Total minutes used on Ubuntu 8 core runner machines. */
        ubuntu_8_core?: number;
        /** @description Total minutes used on Ubuntu 16 core runner machines. */
        ubuntu_16_core?: number;
        /** @description Total minutes used on Ubuntu 32 core runner machines. */
        ubuntu_32_core?: number;
        /** @description Total minutes used on Ubuntu 64 core runner machines. */
        ubuntu_64_core?: number;
        /** @description Total minutes used on Windows 4 core runner machines. */
        windows_4_core?: number;
        /** @description Total minutes used on Windows 8 core runner machines. */
        windows_8_core?: number;
        /** @description Total minutes used on Windows 16 core runner machines. */
        windows_16_core?: number;
        /** @description Total minutes used on Windows 32 core runner machines. */
        windows_32_core?: number;
        /** @description Total minutes used on Windows 64 core runner machines. */
        windows_64_core?: number;
        /** @description Total minutes used on all runner machines. */
        total?: number;
      };
    };
    "packages-billing-usage": {
      /** @description Sum of the free and paid storage space (GB) for GitHuub Packages. */
      total_gigabytes_bandwidth_used: number;
      /** @description Total paid storage space (GB) for GitHuub Packages. */
      total_paid_gigabytes_bandwidth_used: number;
      /** @description Free storage space (GB) for GitHub Packages. */
      included_gigabytes_bandwidth: number;
    };
    "combined-billing-usage": {
      /** @description Numbers of days left in billing cycle. */
      days_left_in_billing_cycle: number;
      /** @description Estimated storage space (GB) used in billing cycle. */
      estimated_paid_storage_for_month: number;
      /** @description Estimated sum of free and paid storage space (GB) used in billing cycle. */
      estimated_storage_for_month: number;
    };
    /**
     * Actions OIDC Subject customization
     * @description Actions OIDC Subject customization
     */
    "oidc-custom-sub": {
      include_claim_keys: string[];
    };
    /**
     * Empty Object
     * @description An object without any properties.
     */
    "empty-object": Record<string, never>;
    /**
     * Credential Authorization
     * @description Credential Authorization
     */
    "credential-authorization": {
      /**
       * @description User login that owns the underlying credential.
       * @example monalisa
       */
      login: string;
      /**
       * @description Unique identifier for the credential.
       * @example 1
       */
      credential_id: number;
      /**
       * @description Human-readable description of the credential type.
       * @example SSH Key
       */
      credential_type: string;
      /**
       * @description Last eight characters of the credential. Only included in responses with credential_type of personal access token.
       * @example 12345678
       */
      token_last_eight?: string;
      /**
       * Format: date-time
       * @description Date when the credential was authorized for use.
       * @example 2011-01-26T19:06:43Z
       */
      credential_authorized_at: string;
      /**
       * @description List of oauth scopes the token has been granted.
       * @example [
       *   "user",
       *   "repo"
       * ]
       */
      scopes?: string[];
      /**
       * @description Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key.
       * @example jklmnop12345678
       */
      fingerprint?: string;
      /**
       * Format: date-time
       * @description Date when the credential was last accessed. May be null if it was never accessed
       * @example 2011-01-26T19:06:43Z
       */
      credential_accessed_at: string | null;
      /** @example 12345678 */
      authorized_credential_id: number | null;
      /**
       * @description The title given to the ssh key. This will only be present when the credential is an ssh key.
       * @example my ssh key
       */
      authorized_credential_title?: string | null;
      /**
       * @description The note given to the token. This will only be present when the credential is a token.
       * @example my token
       */
      authorized_credential_note?: string | null;
      /**
       * Format: date-time
       * @description The expiry for the token. This will only be present when the credential is a token.
       */
      authorized_credential_expires_at?: string | null;
    };
    /**
     * ExternalGroup
     * @description Information about an external group's usage and its members
     */
    "external-group": {
      /**
       * @description The internal ID of the group
       * @example 1
       */
      group_id: number;
      /**
       * @description The display name for the group
       * @example group-azuread-test
       */
      group_name: string;
      /**
       * @description The date when the group was last updated_at
       * @example 2021-01-03 22:27:15:000 -700
       */
      updated_at?: string;
      /**
       * @description An array of teams linked to this group
       * @example [
       *   {
       *     "team_id": 1,
       *     "team_name": "team-test"
       *   },
       *   {
       *     "team_id": 2,
       *     "team_name": "team-test2"
       *   }
       * ]
       */
      teams: {
        /**
         * @description The id for a team
         * @example 1
         */
        team_id: number;
        /**
         * @description The name of the team
         * @example team-test
         */
        team_name: string;
      }[];
      /**
       * @description An array of external members linked to this group
       * @example [
       *   {
       *     "member_id": 1,
       *     "member_login": "mona-lisa_eocsaxrs",
       *     "member_name": "Mona Lisa",
       *     "member_email": "mona_lisa@github.com"
       *   },
       *   {
       *     "member_id": 2,
       *     "member_login": "octo-lisa_eocsaxrs",
       *     "member_name": "Octo Lisa",
       *     "member_email": "octo_lisa@github.com"
       *   }
       * ]
       */
      members: {
        /**
         * @description The internal user ID of the identity
         * @example 1
         */
        member_id: number;
        /**
         * @description The handle/login for the user
         * @example mona-lisa_eocsaxrs
         */
        member_login: string;
        /**
         * @description The user display name/profile name
         * @example Mona Lisa
         */
        member_name: string;
        /**
         * @description An email attached to a user
         * @example mona_lisa@github.com
         */
        member_email: string;
      }[];
    };
    /**
     * ExternalGroups
     * @description A list of external groups available to be connected to a team
     */
    "external-groups": {
      /**
       * @description An array of external groups available to be mapped to a team
       * @example [
       *   {
       *     "group_id": 1,
       *     "group_name": "group-azuread-test",
       *     "updated_at": "2021-01-03 22:27:15:000 -700"
       *   },
       *   {
       *     "group_id": 2,
       *     "group_name": "group-azuread-test2",
       *     "updated_at": "2021-06-03 22:27:15:000 -700"
       *   }
       * ]
       */
      groups?: {
        /**
         * @description The internal ID of the group
         * @example 1
         */
        group_id: number;
        /**
         * @description The display name of the group
         * @example group-azuread-test
         */
        group_name: string;
        /**
         * @description The time of the last update for this group
         * @example 2019-06-03 22:27:15:000 -700
         */
        updated_at: string;
      }[];
    };
    /**
     * GroupMapping
     * @description External Groups to be mapped to a team for membership
     */
    "group-mapping": {
      /**
       * @description Array of groups to be mapped to this team
       * @example [
       *   {
       *     "group_id": "111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa",
       *     "group_name": "saml-azuread-test",
       *     "group_description": "A group of Developers working on AzureAD SAML SSO"
       *   },
       *   {
       *     "group_id": "2bb2bb2b-bb22-22bb-2bb2-bb2bbb2bb2b2",
       *     "group_name": "saml-azuread-test2",
       *     "group_description": "Another group of Developers working on AzureAD SAML SSO"
       *   }
       * ]
       */
      groups?: {
        /**
         * @description The ID of the group
         * @example 111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa
         */
        group_id: string;
        /**
         * @description The name of the group
         * @example saml-azuread-test
         */
        group_name: string;
        /**
         * @description a description of the group
         * @example A group of Developers working on AzureAD SAML SSO
         */
        group_description: string;
        /**
         * @description synchronization status for this group mapping
         * @example unsynced
         */
        status?: string;
        /**
         * @description the time of the last sync for this group-mapping
         * @example 2019-06-03 22:27:15:000 -700
         */
        synced_at?: string | null;
      }[];
    };
    /**
     * The json payload enables/disables the use of sub claim customization
     * @description OIDC Customer Subject
     */
    "opt-out-oidc-custom-sub": {
      use_default: boolean;
    };
    /**
     * @description State of a code scanning alert.
     * @enum {string}
     */
    "code-scanning-alert-state": "open" | "closed" | "dismissed" | "fixed";
    "code-scanning-alert-items": {
      number: components["schemas"]["alert-number"];
      created_at: components["schemas"]["alert-created-at"];
      updated_at?: components["schemas"]["alert-updated-at"];
      url: components["schemas"]["alert-url"];
      html_url: components["schemas"]["alert-html-url"];
      instances_url: components["schemas"]["alert-instances-url"];
      state: components["schemas"]["code-scanning-alert-state"];
      fixed_at?: components["schemas"]["code-scanning-alert-fixed-at"];
      dismissed_by: components["schemas"]["nullable-simple-user"];
      dismissed_at: components["schemas"]["code-scanning-alert-dismissed-at"];
      dismissed_reason: components["schemas"]["code-scanning-alert-dismissed-reason"];
      dismissed_comment?: components["schemas"]["code-scanning-alert-dismissed-comment"];
      rule: components["schemas"]["code-scanning-alert-rule-summary"];
      tool: components["schemas"]["code-scanning-analysis-tool"];
      most_recent_instance: components["schemas"]["code-scanning-alert-instance"];
    };
    /**
     * SCIM User List
     * @description SCIM User List
     */
    "scim-user-list": {
      /** @description SCIM schema used. */
      schemas: string[];
      /** @example 3 */
      totalResults: number;
      /** @example 10 */
      itemsPerPage: number;
      /** @example 1 */
      startIndex: number;
      Resources: components["schemas"]["scim-user"][];
    };
    /**
     * SCIM /Users
     * @description SCIM /Users provisioning endpoints
     */
    "scim-user": {
      /** @description SCIM schema used. */
      schemas: string[];
      /**
       * @description Unique identifier of an external identity
       * @example 1b78eada-9baa-11e6-9eb6-a431576d590e
       */
      id: string;
      /**
       * @description The ID of the User.
       * @example a7b0f98395
       */
      externalId: string | null;
      /**
       * @description Configured by the admin. Could be an email, login, or username
       * @example someone@example.com
       */
      userName: string | null;
      /**
       * @description The name of the user, suitable for display to end-users
       * @example Jon Doe
       */
      displayName?: string | null;
      /**
       * @example {
       *   "givenName": "Jane",
       *   "familyName": "User"
       * }
       */
      name: {
        givenName: string | null;
        familyName: string | null;
        formatted?: string | null;
      };
      /**
       * @description user emails
       * @example [
       *   {
       *     "value": "someone@example.com",
       *     "primary": true
       *   },
       *   {
       *     "value": "another@example.com",
       *     "primary": false
       *   }
       * ]
       */
      emails: {
        value: string;
        primary?: boolean;
      }[];
      /**
       * @description The active status of the User.
       * @example true
       */
      active: boolean;
      meta: {
        /** @example User */
        resourceType?: string;
        /**
         * Format: date-time
         * @example 2019-01-24T22:45:36.000Z
         */
        created?: string;
        /**
         * Format: date-time
         * @example 2019-01-24T22:45:36.000Z
         */
        lastModified?: string;
        /**
         * Format: uri
         * @example https://api.github.com/scim/v2/organizations/myorg-123abc55141bfd8f/Users/c42772b5-2029-11e9-8543-9264a97dec8d
         */
        location?: string;
      };
      /** @description The ID of the organization. */
      organization_id?: number;
      /**
       * @description Set of operations to be performed
       * @example [
       *   {
       *     "op": "replace",
       *     "value": {
       *       "active": false
       *     }
       *   }
       * ]
       */
      operations?: {
        /** @enum {string} */
        op: "add" | "remove" | "replace";
        path?: string;
        value?: string | Record<string, never> | Record<string, never>[];
      }[];
      /** @description associated groups */
      groups?: {
        value?: string;
        display?: string;
      }[];
    };
    /**
     * Basic Error
     * @description Basic Error
     */
    "basic-error": {
      message?: string;
      documentation_url?: string;
      url?: string;
      status?: string;
    };
    /**
     * Scim Error
     * @description Scim Error
     */
    "scim-error": {
      message?: string | null;
      documentation_url?: string | null;
      detail?: string | null;
      status?: number;
      scimType?: string | null;
      schemas?: string[];
    };
    /**
     * Validation Error Simple
     * @description Validation Error Simple
     */
    "validation-error-simple": {
      message: string;
      documentation_url: string;
      errors?: string[];
    };
    /** @description The name of the tool used to generate the code scanning analysis. */
    "code-scanning-analysis-tool-name": string;
    /** @description The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
    "code-scanning-analysis-tool-guid": string | null;
    /**
     * @description The full Git reference, formatted as `refs/heads/<branch name>`,
     * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
     */
    "code-scanning-ref": string;
    /** @description The security alert number. */
    readonly "alert-number": number;
    /**
     * Format: date-time
     * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly "alert-created-at": string;
    /**
     * Format: date-time
     * @description The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly "alert-updated-at": string;
    /**
     * Format: uri
     * @description The REST API URL of the alert resource.
     */
    readonly "alert-url": string;
    /**
     * Format: uri
     * @description The GitHub URL of the alert resource.
     */
    readonly "alert-html-url": string;
    /**
     * Format: uri
     * @description The REST API URL for fetching the list of instances for an alert.
     */
    readonly "alert-instances-url": string;
    /**
     * Format: date-time
     * @description The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly "code-scanning-alert-fixed-at": string | null;
    /**
     * Simple User
     * @description Simple User
     */
    "nullable-simple-user": {
      name?: string | null;
      email?: string | null;
      /** @example octocat */
      login: string;
      /** @example 1 */
      id: number;
      /** @example MDQ6VXNlcjE= */
      node_id: string;
      /**
       * Format: uri
       * @example https://github.com/images/error/octocat_happy.gif
       */
      avatar_url: string;
      /** @example 41d064eb2195891e12d0413f63227ea7 */
      gravatar_id: string | null;
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat
       */
      url: string;
      /**
       * Format: uri
       * @example https://github.com/octocat
       */
      html_url: string;
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/followers
       */
      followers_url: string;
      /** @example https://api.github.com/users/octocat/following{/other_user} */
      following_url: string;
      /** @example https://api.github.com/users/octocat/gists{/gist_id} */
      gists_url: string;
      /** @example https://api.github.com/users/octocat/starred{/owner}{/repo} */
      starred_url: string;
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/subscriptions
       */
      subscriptions_url: string;
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/orgs
       */
      organizations_url: string;
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/repos
       */
      repos_url: string;
      /** @example https://api.github.com/users/octocat/events{/privacy} */
      events_url: string;
      /**
       * Format: uri
       * @example https://api.github.com/users/octocat/received_events
       */
      received_events_url: string;
      /** @example User */
      type: string;
      site_admin: boolean;
      /** @example "2020-07-09T00:17:55Z" */
      starred_at?: string;
    } | null;
    /**
     * Format: date-time
     * @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    readonly "code-scanning-alert-dismissed-at": string | null;
    /**
     * @description **Required when the state is dismissed.** The reason for dismissing or closing the alert.
     * @enum {string|null}
     */
    "code-scanning-alert-dismissed-reason":
      | ""
      | "false positive"
      | "won't fix"
      | "used in tests"
      | null;
    /** @description The dismissal comment associated with the dismissal of the alert. */
    "code-scanning-alert-dismissed-comment": string | null;
    "code-scanning-alert-rule-summary": {
      /** @description A unique identifier for the rule used to detect the alert. */
      id?: string | null;
      /** @description The name of the rule used to detect the alert. */
      name?: string;
      /** @description A set of tags applicable for the rule. */
      tags?: string[] | null;
      /**
       * @description The severity of the alert.
       * @enum {string|null}
       */
      severity?: "none" | "note" | "warning" | "error" | null;
      /** @description A short description of the rule used to detect the alert. */
      description?: string;
    };
    "code-scanning-analysis-tool": {
      name?: components["schemas"]["code-scanning-analysis-tool-name"];
      version?: components["schemas"]["code-scanning-analysis-tool-version"];
      guid?: components["schemas"]["code-scanning-analysis-tool-guid"];
    };
    /** @description The version of the tool used to generate the code scanning analysis. */
    "code-scanning-analysis-tool-version": string | null;
    "code-scanning-alert-instance": {
      ref?: components["schemas"]["code-scanning-ref"];
      analysis_key?: components["schemas"]["code-scanning-analysis-analysis-key"];
      environment?: components["schemas"]["code-scanning-alert-environment"];
      category?: components["schemas"]["code-scanning-analysis-category"];
      state?: components["schemas"]["code-scanning-alert-state"];
      commit_sha?: string;
      message?: {
        text?: string;
      };
      location?: components["schemas"]["code-scanning-alert-location"];
      html_url?: string;
      /**
       * @description Classifications that have been applied to the file that triggered the alert.
       * For example identifying it as documentation, or a generated file.
       */
      classifications?: components["schemas"]["code-scanning-alert-classification"][];
    };
    /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
    "code-scanning-analysis-analysis-key": string;
    /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
    "code-scanning-alert-environment": string;
    /** @description Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
    "code-scanning-analysis-category": string;
    /** @description Describe a region within a file for the alert. */
    "code-scanning-alert-location": {
      path?: string;
      start_line?: number;
      end_line?: number;
      start_column?: number;
      end_column?: number;
    };
    /**
     * @description A classification of the file. For example to identify it as generated.
     * @enum {string|null}
     */
    "code-scanning-alert-classification":
      | "source"
      | "generated"
      | "test"
      | "library"
      | null;
    /**
     * Validation Error
     * @description Validation Error
     */
    "validation-error": {
      message: string;
      documentation_url: string;
      errors?: {
        resource?: string;
        field?: string;
        message?: string;
        code: string;
        index?: number;
        value?: (string | null) | (number | null) | (string[] | null);
      }[];
    };
  };
  responses: {
    /** @description Forbidden */
    forbidden: {
      content: {
        "application/json": components["schemas"]["basic-error"];
      };
    };
    /** @description Resource not found */
    not_found: {
      content: {
        "application/json": components["schemas"]["basic-error"];
      };
    };
    /** @description Bad Request */
    bad_request: {
      content: {
        "application/json": components["schemas"]["basic-error"];
        "application/scim+json": components["schemas"]["scim-error"];
      };
    };
    /** @description Validation failed, or the endpoint has been spammed. */
    validation_failed_simple: {
      content: {
        "application/json": components["schemas"]["validation-error-simple"];
      };
    };
    /** @description Not modified */
    not_modified: never;
    /** @description Response if GitHub Advanced Security is not enabled for this repository */
    code_scanning_forbidden_read: {
      content: {
        "application/json": components["schemas"]["basic-error"];
      };
    };
    /** @description Service unavailable */
    service_unavailable: {
      content: {
        "application/json": {
          code?: string;
          message?: string;
          documentation_url?: string;
        };
      };
    };
    /** @description Bad Request */
    scim_bad_request: {
      content: {
        "application/json": components["schemas"]["scim-error"];
        "application/scim+json": components["schemas"]["scim-error"];
      };
    };
    /** @description Forbidden */
    scim_forbidden: {
      content: {
        "application/json": components["schemas"]["scim-error"];
        "application/scim+json": components["schemas"]["scim-error"];
      };
    };
    /** @description Resource not found */
    scim_not_found: {
      content: {
        "application/json": components["schemas"]["scim-error"];
        "application/scim+json": components["schemas"]["scim-error"];
      };
    };
    /** @description Too Many Requests */
    scim_too_many_requests: {
      content: {
        "application/json": components["schemas"]["scim-error"];
        "application/scim+json": components["schemas"]["scim-error"];
      };
    };
    /** @description Conflict */
    scim_conflict: {
      content: {
        "application/json": components["schemas"]["scim-error"];
        "application/scim+json": components["schemas"]["scim-error"];
      };
    };
    /** @description Internal Error */
    scim_internal_error: {
      content: {
        "application/json": components["schemas"]["scim-error"];
        "application/scim+json": components["schemas"]["scim-error"];
      };
    };
    /** @description Validation failed, or the endpoint has been spammed. */
    validation_failed: {
      content: {
        "application/json": components["schemas"]["validation-error"];
      };
    };
  };
  parameters: {
    /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
    enterprise: string;
    /** @description A search phrase. For more information, see [Searching the audit log](https://docs.github.com/enterprise-cloud@latest//github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log). */
    "audit-log-phrase": string;
    /**
     * @description The event types to include:
     *
     * - `web` - returns web (non-Git) events.
     * - `git` - returns Git events.
     * - `all` - returns both web and Git events.
     *
     * The default is `web`.
     */
    "audit-log-include": "web" | "git" | "all";
    /** @description A cursor, as given in the [Link header](https://docs.github.com/enterprise-cloud@latest//rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. */
    "audit-log-after": string;
    /** @description A cursor, as given in the [Link header](https://docs.github.com/enterprise-cloud@latest//rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. */
    "audit-log-before": string;
    /**
     * @description The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.
     *
     * The default is `desc`.
     */
    "audit-log-order": "desc" | "asc";
    /** @description Page number of the results to fetch. */
    page: number;
    /** @description The number of results per page (max 100). */
    "per-page": number;
    /** @description The organization name. The name is not case sensitive. */
    org: string;
    /** @description The unique identifier of the group. */
    "group-id": number;
    /** @description The slug of the team name. */
    "team-slug": string;
    /** @description The account owner of the repository. The name is not case sensitive. */
    owner: string;
    /** @description The name of the repository. The name is not case sensitive. */
    repo: string;
    /** @description The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
    "tool-name": components["schemas"]["code-scanning-analysis-tool-name"];
    /** @description The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
    "tool-guid": components["schemas"]["code-scanning-analysis-tool-guid"];
    /** @description The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
    "git-ref": components["schemas"]["code-scanning-ref"];
    /** @description The direction to sort the results by. */
    direction: "asc" | "desc";
    /** @description The unique identifier of the SCIM user. */
    "scim-user-id": string;
    /** @description The unique identifier of the team. */
    "team-id": number;
  };
  requestBodies: never;
  headers: {
    /** @example <https://api.github.com/resource?page=2>; rel="next", <https://api.github.com/resource?page=5>; rel="last" */
    link: string;
  };
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
  /**
   * Set the GitHub Actions OIDC custom issuer policy for an enterprise
   * @description Sets the GitHub Actions OpenID Connect (OIDC) custom issuer policy for an enterprise.
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * GitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.
   */
  "actions/set-actions-oidc-custom-issuer-policy-for-enterprise": {
    parameters: {
      path: {
        enterprise: components["parameters"]["enterprise"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["actions-oidc-custom-issuer-policy-for-enterprise"];
      };
    };
    responses: {
      /** @description Response */
      204: never;
    };
  };
  /**
   * Get the audit log for an enterprise
   * @description Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
   */
  "enterprise-admin/get-audit-log": {
    parameters: {
      query: {
        phrase?: components["parameters"]["audit-log-phrase"];
        include?: components["parameters"]["audit-log-include"];
        after?: components["parameters"]["audit-log-after"];
        before?: components["parameters"]["audit-log-before"];
        order?: components["parameters"]["audit-log-order"];
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["per-page"];
      };
      path: {
        enterprise: components["parameters"]["enterprise"];
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": components["schemas"]["audit-log-event"][];
        };
      };
    };
  };
  /**
   * List enterprise consumed licenses
   * @description Lists the license consumption information for all users, including those from connected servers, associated with an enterprise.
   * To use this endpoint, you must be an enterprise admin, and you must use an access
   * token with the `read:enterprise` scope.
   *
   * **Note:** The license consumption API endpoints for enterprise accounts are currently
   * in Beta and are subject to change.
   */
  "enterprise-admin/get-consumed-licenses": {
    parameters: {
      query: {
        per_page?: components["parameters"]["per-page"];
        page?: components["parameters"]["page"];
      };
      path: {
        enterprise: components["parameters"]["enterprise"];
      };
    };
    responses: {
      /** @description Consumed Licenses Response */
      200: {
        headers: {
          Link: components["headers"]["link"];
        };
        content: {
          "application/json": components["schemas"]["get-consumed-licenses"];
        };
      };
    };
  };
  /**
   * Get a license sync status
   * @description Gets information about the status of a license sync job for an enterprise.
   * To use this endpoint, you must be an enterprise admin, and you must use an access
   * token with the `read:enterprise` scope.
   */
  "enterprise-admin/get-license-sync-status": {
    parameters: {
      path: {
        enterprise: components["parameters"]["enterprise"];
      };
    };
    responses: {
      /** @description License Sync Status Response */
      200: {
        content: {
          "application/json": components["schemas"]["get-license-sync-status"];
        };
      };
    };
  };
  /**
   * Get GitHub Actions billing for an enterprise
   * @description Gets the summary of the free and paid GitHub Actions minutes used.
   *
   * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
   *
   * The authenticated user must be an enterprise admin.
   */
  "billing/get-github-actions-billing-ghe": {
    parameters: {
      path: {
        enterprise: components["parameters"]["enterprise"];
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": components["schemas"]["actions-billing-usage"];
        };
      };
    };
  };
  /**
   * Get GitHub Packages billing for an enterprise
   * @description Gets the free and paid storage used for GitHub Packages in gigabytes.
   *
   * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
   *
   * The authenticated user must be an enterprise admin.
   */
  "billing/get-github-packages-billing-ghe": {
    parameters: {
      path: {
        enterprise: components["parameters"]["enterprise"];
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": components["schemas"]["packages-billing-usage"];
        };
      };
    };
  };
  /**
   * Get shared storage billing for an enterprise
   * @description Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
   *
   * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
   *
   * The authenticated user must be an enterprise admin.
   */
  "billing/get-shared-storage-billing-ghe": {
    parameters: {
      path: {
        enterprise: components["parameters"]["enterprise"];
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": components["schemas"]["combined-billing-usage"];
        };
      };
    };
  };
  /**
   * Get the customization template for an OIDC subject claim for an organization
   * @description Gets the customization template for an OpenID Connect (OIDC) subject claim.
   * You must authenticate using an access token with the `read:org` scope to use this endpoint.
   * GitHub Apps must have the `organization_administration:write` permission to use this endpoint.
   */
  "oidc/get-oidc-custom-sub-template-for-org": {
    parameters: {
      path: {
        org: components["parameters"]["org"];
      };
    };
    responses: {
      /** @description A JSON serialized template for OIDC subject claim customization */
      200: {
        content: {
          "application/json": components["schemas"]["oidc-custom-sub"];
        };
      };
    };
  };
  /**
   * Set the customization template for an OIDC subject claim for an organization
   * @description Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.
   * You must authenticate using an access token with the `write:org` scope to use this endpoint.
   * GitHub Apps must have the `admin:org` permission to use this endpoint.
   */
  "oidc/update-oidc-custom-sub-template-for-org": {
    parameters: {
      path: {
        org: components["parameters"]["org"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["oidc-custom-sub"];
      };
    };
    responses: {
      /** @description Empty response */
      201: {
        content: {
          "application/json": components["schemas"]["empty-object"];
        };
      };
      403: components["responses"]["forbidden"];
      404: components["responses"]["not_found"];
    };
  };
  /**
   * Get the audit log for an organization
   * @description Gets the audit log for an organization. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/enterprise-cloud@latest//github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization)."
   *
   * This endpoint is available for organizations on GitHub Enterprise Cloud. To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.
   *
   * By default, the response includes up to 30 events from the past three months. Use the `phrase` parameter to filter results and retrieve older events. For example, use the `phrase` parameter with the `created` qualifier to filter events based on when the events occurred. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/enterprise-cloud@latest//organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#searching-the-audit-log)."
   *
   * Use pagination to retrieve fewer or more than 30 events. For more information, see "[Resources in the REST API](https://docs.github.com/enterprise-cloud@latest//rest/overview/resources-in-the-rest-api#pagination)."
   */
  "orgs/get-audit-log": {
    parameters: {
      query: {
        phrase?: components["parameters"]["audit-log-phrase"];
        include?: components["parameters"]["audit-log-include"];
        after?: components["parameters"]["audit-log-after"];
        before?: components["parameters"]["audit-log-before"];
        order?: components["parameters"]["audit-log-order"];
        per_page?: components["parameters"]["per-page"];
      };
      path: {
        org: components["parameters"]["org"];
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": components["schemas"]["audit-log-event"][];
        };
      };
    };
  };
  /**
   * List SAML SSO authorizations for an organization
   * @description Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).
   *
   * An authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://docs.github.com/en/articles/about-authentication-with-saml-single-sign-on).
   */
  "orgs/list-saml-sso-authorizations": {
    parameters: {
      query: {
        per_page?: components["parameters"]["per-page"];
        /** @description Page token */
        page?: number;
        /** @description Limits the list of credentials authorizations for an organization to a specific login */
        login?: string;
      };
      path: {
        org: components["parameters"]["org"];
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": components["schemas"]["credential-authorization"][];
        };
      };
    };
  };
  /**
   * Remove a SAML SSO authorization for an organization
   * @description Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).
   *
   * An authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
   */
  "orgs/remove-saml-sso-authorization": {
    parameters: {
      path: {
        org: components["parameters"]["org"];
        credential_id: number;
      };
    };
    responses: {
      /** @description Response */
      204: never;
      404: components["responses"]["not_found"];
    };
  };
  /**
   * Get an external group
   * @description Displays information about the specific group's usage.  Provides a list of the group's external members as well as a list of teams that this group is connected to.
   *
   * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/enterprise-cloud@latest//github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
   */
  "teams/external-idp-group-info-for-org": {
    parameters: {
      path: {
        org: components["parameters"]["org"];
        group_id: components["parameters"]["group-id"];
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": components["schemas"]["external-group"];
        };
      };
    };
  };
  /**
   * List external groups in an organization
   * @description Lists external groups available in an organization. You can query the groups using the `display_name` parameter, only groups with a `group_name` containing the text provided in the `display_name` parameter will be returned.  You can also limit your page results using the `per_page` parameter. GitHub Enterprise Cloud generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
   *
   * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/enterprise-cloud@latest//github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
   */
  "teams/list-external-idp-groups-for-org": {
    parameters: {
      query: {
        per_page?: components["parameters"]["per-page"];
        /** @description Page token */
        page?: number;
        /** @description Limits the list to groups containing the text in the group name */
        display_name?: string;
      };
      path: {
        org: components["parameters"]["org"];
      };
    };
    responses: {
      /** @description Response */
      200: {
        headers: {
          /** @example <https://api.github.com/resource?per_page=2&page=url-encoded-next-page-token>; rel="next" */
          Link?: string;
        };
        content: {
          "application/json": components["schemas"]["external-groups"];
        };
      };
    };
  };
  /**
   * List IdP groups for an organization
   * @description Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub Enterprise Cloud generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
   */
  "teams/list-idp-groups-for-org": {
    parameters: {
      query: {
        per_page?: components["parameters"]["per-page"];
        /** @description Page token */
        page?: string;
      };
      path: {
        org: components["parameters"]["org"];
      };
    };
    responses: {
      /** @description Response */
      200: {
        headers: {
          /** @example <https://api.github.com/resource?per_page=2&page=url-encoded-next-page-token>; rel="next" */
          Link?: string;
        };
        content: {
          "application/json": components["schemas"]["group-mapping"];
        };
      };
    };
  };
  /**
   * List a connection between an external group and a team
   * @description Lists a connection between a team and an external group.
   *
   * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/enterprise-cloud@latest//github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
   */
  "teams/list-linked-external-idp-groups-to-team-for-org": {
    parameters: {
      path: {
        org: components["parameters"]["org"];
        team_slug: components["parameters"]["team-slug"];
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": components["schemas"]["external-groups"];
        };
      };
    };
  };
  /**
   * Remove the connection between an external group and a team
   * @description Deletes a connection between a team and an external group.
   *
   * You can manage team membership with your IdP using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/enterprise-cloud@latest//github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   */
  "teams/unlink-external-idp-group-from-team-for-org": {
    parameters: {
      path: {
        org: components["parameters"]["org"];
        team_slug: components["parameters"]["team-slug"];
      };
    };
    responses: {
      /** @description Response */
      204: never;
    };
  };
  /**
   * Update the connection between an external group and a team
   * @description Creates a connection between a team and an external group.  Only one external group can be linked to a team.
   *
   * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/enterprise-cloud@latest//github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
   */
  "teams/link-external-idp-group-to-team-for-org": {
    parameters: {
      path: {
        org: components["parameters"]["org"];
        team_slug: components["parameters"]["team-slug"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description External Group Id
           * @example 1
           */
          group_id: number;
        };
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": components["schemas"]["external-group"];
        };
      };
    };
  };
  /**
   * List IdP groups for a team
   * @description Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * List IdP groups connected to a team on GitHub Enterprise Cloud.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
   */
  "teams/list-idp-groups-in-org": {
    parameters: {
      path: {
        org: components["parameters"]["org"];
        team_slug: components["parameters"]["team-slug"];
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": components["schemas"]["group-mapping"];
        };
      };
    };
  };
  /**
   * Create or update IdP group connections
   * @description Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
   */
  "teams/create-or-update-idp-group-connections-in-org": {
    parameters: {
      path: {
        org: components["parameters"]["org"];
        team_slug: components["parameters"]["team-slug"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove. */
          groups?: {
            /** @description ID of the IdP group. */
            group_id: string;
            /** @description Name of the IdP group. */
            group_name: string;
            /** @description Description of the IdP group. */
            group_description: string;
          }[];
        };
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": components["schemas"]["group-mapping"];
        };
      };
    };
  };
  /**
   * Get the opt-out flag of an OIDC subject claim customization for a repository
   * @description Gets the `opt-out` flag of a GitHub Actions OpenID Connect (OIDC) subject claim customization for a repository.
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint. GitHub Apps must have the `organization_administration:read` permission to use this endpoint.
   */
  "actions/get-custom-oidc-sub-claim-for-repo": {
    parameters: {
      path: {
        owner: components["parameters"]["owner"];
        repo: components["parameters"]["repo"];
      };
    };
    responses: {
      /** @description Status response */
      200: {
        content: {
          "application/json": components["schemas"]["opt-out-oidc-custom-sub"];
        };
      };
      400: components["responses"]["bad_request"];
      404: components["responses"]["not_found"];
    };
  };
  /**
   * Set the opt-in flag of an OIDC subject claim customization for a repository
   * @description Sets the `opt-in` or `opt-out` flag of a GitHub Actions OpenID Connect (OIDC) subject claim customization for a repository.
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
   */
  "actions/set-custom-oidc-sub-claim-for-repo": {
    parameters: {
      path: {
        owner: components["parameters"]["owner"];
        repo: components["parameters"]["repo"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["opt-out-oidc-custom-sub"];
      };
    };
    responses: {
      /** @description Empty response */
      201: {
        content: {
          "application/json": components["schemas"]["empty-object"];
        };
      };
      400: components["responses"]["bad_request"];
      404: components["responses"]["not_found"];
      422: components["responses"]["validation_failed_simple"];
    };
  };
  /**
   * List code scanning alerts for a repository
   * @description Lists code scanning alerts.
   *
   * To use this endpoint, you must use an access token with the `security_events` scope or, for alerts from public repositories only, an access token with the `public_repo` scope.
   *
   * GitHub Apps must have the `security_events` read
   * permission to use this endpoint.
   *
   * The response includes a `most_recent_instance` object.
   * This provides details of the most recent instance of this alert
   * for the default branch (or for the specified Git reference if you used `ref` in the request).
   */
  "code-scanning/list-alerts-for-repo": {
    parameters: {
      query: {
        tool_name?: components["parameters"]["tool-name"];
        tool_guid?: components["parameters"]["tool-guid"];
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["per-page"];
        ref?: components["parameters"]["git-ref"];
        direction?: components["parameters"]["direction"];
        /** @description The property by which to sort the results. */
        sort?: "created" | "updated";
        /** @description If specified, only code scanning alerts with this state will be returned. */
        state?: components["schemas"]["code-scanning-alert-state"];
      };
      path: {
        owner: components["parameters"]["owner"];
        repo: components["parameters"]["repo"];
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": components["schemas"]["code-scanning-alert-items"][];
        };
      };
      304: components["responses"]["not_modified"];
      403: components["responses"]["code_scanning_forbidden_read"];
      404: components["responses"]["not_found"];
      503: components["responses"]["service_unavailable"];
    };
  };
  /**
   * List SCIM provisioned identities
   * @description Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.
   *
   * When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub Enterprise Cloud. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
   *   - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.
   *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
   *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
   *
   * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub Enterprise Cloud account after completing SSO:
   *
   * 1. The user is granted access by the IdP and is not a member of the GitHub Enterprise Cloud organization.
   *
   * 1. The user attempts to access the GitHub Enterprise Cloud organization and initiates the SAML SSO process, and is not currently signed in to their GitHub Enterprise Cloud account.
   *
   * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub Enterprise Cloud account:
   *    - If the user signs in, their GitHub Enterprise Cloud account is linked to this entry.
   *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub Enterprise Cloud organization, and the external identity `null` entry remains in place.
   */
  "scim/list-provisioned-identities": {
    parameters: {
      query: {
        /** @description Used for pagination: the index of the first result to return. */
        startIndex?: number;
        /** @description Used for pagination: the number of results to return. */
        count?: number;
        /**
         * @description Filters results using the equals query parameter operator (`eq`). You can filter results that are equal to `id`, `userName`, `emails`, and `external_id`. For example, to search for an identity with the `userName` Octocat, you would use this query:
         *
         * `?filter=userName%20eq%20\"Octocat\"`.
         *
         * To filter results for the identity with the email `octocat@github.com`, you would use this query:
         *
         * `?filter=emails%20eq%20\"octocat@github.com\"`.
         */
        filter?: string;
      };
      path: {
        org: components["parameters"]["org"];
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/scim+json": components["schemas"]["scim-user-list"];
        };
      };
      304: components["responses"]["not_modified"];
      400: components["responses"]["scim_bad_request"];
      403: components["responses"]["scim_forbidden"];
      404: components["responses"]["scim_not_found"];
      429: components["responses"]["scim_too_many_requests"];
    };
  };
  /**
   * Provision and invite a SCIM user
   * @description Provision organization membership for a user, and send an activation email to the email address.
   */
  "scim/provision-and-invite-user": {
    parameters: {
      path: {
        org: components["parameters"]["org"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Configured by the admin. Could be an email, login, or username
           * @example someone@example.com
           */
          userName: string;
          /**
           * @description The name of the user, suitable for display to end-users
           * @example Jon Doe
           */
          displayName?: string;
          /**
           * @example {
           *   "givenName": "Jane",
           *   "familyName": "User"
           * }
           */
          name: {
            givenName: string;
            familyName: string;
            formatted?: string;
          };
          /**
           * @description user emails
           * @example [
           *   {
           *     "value": "someone@example.com",
           *     "primary": true
           *   },
           *   {
           *     "value": "another@example.com",
           *     "primary": false
           *   }
           * ]
           */
          emails: {
            value: string;
            primary?: boolean;
            type?: string;
          }[];
          schemas?: string[];
          externalId?: string;
          groups?: string[];
          active?: boolean;
        };
      };
    };
    responses: {
      /** @description Response */
      201: {
        content: {
          "application/scim+json": components["schemas"]["scim-user"];
        };
      };
      304: components["responses"]["not_modified"];
      400: components["responses"]["scim_bad_request"];
      403: components["responses"]["scim_forbidden"];
      404: components["responses"]["scim_not_found"];
      409: components["responses"]["scim_conflict"];
      500: components["responses"]["scim_internal_error"];
    };
  };
  /** Get SCIM provisioning information for a user */
  "scim/get-provisioning-information-for-user": {
    parameters: {
      path: {
        org: components["parameters"]["org"];
        scim_user_id: components["parameters"]["scim-user-id"];
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/scim+json": components["schemas"]["scim-user"];
        };
      };
      304: components["responses"]["not_modified"];
      403: components["responses"]["scim_forbidden"];
      404: components["responses"]["scim_not_found"];
    };
  };
  /**
   * Update a provisioned organization membership
   * @description Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://docs.github.com/enterprise-cloud@latest//rest/reference/scim#update-an-attribute-for-a-scim-user) endpoint instead.
   *
   * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
   *
   * **Warning:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `{scim_user_id}`.
   */
  "scim/set-information-for-provisioned-user": {
    parameters: {
      path: {
        org: components["parameters"]["org"];
        scim_user_id: components["parameters"]["scim-user-id"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          schemas?: string[];
          /**
           * @description The name of the user, suitable for display to end-users
           * @example Jon Doe
           */
          displayName?: string;
          externalId?: string;
          groups?: string[];
          active?: boolean;
          /**
           * @description Configured by the admin. Could be an email, login, or username
           * @example someone@example.com
           */
          userName: string;
          /**
           * @example {
           *   "givenName": "Jane",
           *   "familyName": "User"
           * }
           */
          name: {
            givenName: string;
            familyName: string;
            formatted?: string;
          };
          /**
           * @description user emails
           * @example [
           *   {
           *     "value": "someone@example.com",
           *     "primary": true
           *   },
           *   {
           *     "value": "another@example.com",
           *     "primary": false
           *   }
           * ]
           */
          emails: {
            type?: string;
            value: string;
            primary?: boolean;
          }[];
        };
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/scim+json": components["schemas"]["scim-user"];
        };
      };
      304: components["responses"]["not_modified"];
      403: components["responses"]["scim_forbidden"];
      404: components["responses"]["scim_not_found"];
    };
  };
  /** Delete a SCIM user from an organization */
  "scim/delete-user-from-org": {
    parameters: {
      path: {
        org: components["parameters"]["org"];
        scim_user_id: components["parameters"]["scim-user-id"];
      };
    };
    responses: {
      /** @description Response */
      204: never;
      304: components["responses"]["not_modified"];
      403: components["responses"]["scim_forbidden"];
      404: components["responses"]["scim_not_found"];
    };
  };
  /**
   * Update an attribute for a SCIM user
   * @description Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
   *
   * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
   *
   * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.
   *
   * ```
   * {
   *   "Operations":[{
   *     "op":"replace",
   *     "value":{
   *       "active":false
   *     }
   *   }]
   * }
   * ```
   */
  "scim/update-attribute-for-user": {
    parameters: {
      path: {
        org: components["parameters"]["org"];
        scim_user_id: components["parameters"]["scim-user-id"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          schemas?: string[];
          /**
           * @description Set of operations to be performed
           * @example [
           *   {
           *     "op": "replace",
           *     "value": {
           *       "active": false
           *     }
           *   }
           * ]
           */
          Operations: {
            /** @enum {string} */
            op: "add" | "remove" | "replace";
            path?: string;
            value?: OneOf<
              [
                {
                  active?: boolean | null;
                  userName?: string | null;
                  externalId?: string | null;
                  givenName?: string | null;
                  familyName?: string | null;
                },
                {
                  value?: string;
                  primary?: boolean;
                }[],
                string
              ]
            >;
          }[];
        };
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/scim+json": components["schemas"]["scim-user"];
        };
      };
      304: components["responses"]["not_modified"];
      400: components["responses"]["scim_bad_request"];
      403: components["responses"]["scim_forbidden"];
      404: components["responses"]["scim_not_found"];
      /** @description Response */
      429: {
        content: {
          "application/json": components["schemas"]["basic-error"];
        };
      };
    };
  };
  /**
   * List IdP groups for a team (Legacy)
   * @deprecated
   * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://docs.github.com/enterprise-cloud@latest//rest/reference/teams#list-idp-groups-for-a-team) endpoint.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * List IdP groups connected to a team on GitHub Enterprise Cloud.
   */
  "teams/list-idp-groups-for-legacy": {
    parameters: {
      path: {
        team_id: components["parameters"]["team-id"];
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": components["schemas"]["group-mapping"];
        };
      };
      403: components["responses"]["forbidden"];
      404: components["responses"]["not_found"];
    };
  };
  /**
   * Create or update IdP group connections (Legacy)
   * @deprecated
   * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://docs.github.com/enterprise-cloud@latest//rest/reference/teams#create-or-update-idp-group-connections) endpoint.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
   */
  "teams/create-or-update-idp-group-connections-legacy": {
    parameters: {
      path: {
        team_id: components["parameters"]["team-id"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove. */
          groups: {
            /** @description ID of the IdP group. */
            group_id: string;
            /** @description Name of the IdP group. */
            group_name: string;
            /** @description Description of the IdP group. */
            group_description: string;
            /** @example "caceab43fc9ffa20081c" */
            id?: string;
            /** @example "external-team-6c13e7288ef7" */
            name?: string;
            /** @example "moar cheese pleese" */
            description?: string;
          }[];
          /** @example "I am not a timestamp" */
          synced_at?: string;
        };
      };
    };
    responses: {
      /** @description Response */
      200: {
        content: {
          "application/json": components["schemas"]["group-mapping"];
        };
      };
      403: components["responses"]["forbidden"];
      422: components["responses"]["validation_failed"];
    };
  };
}
