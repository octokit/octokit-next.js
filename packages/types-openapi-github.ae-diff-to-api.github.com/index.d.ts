/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/admin/hooks": {
    get: operations["enterprise-admin/list-global-webhooks"];
    post: operations["enterprise-admin/create-global-webhook"];
  };
  "/admin/hooks/{hook_id}": {
    get: operations["enterprise-admin/get-global-webhook"];
    delete: operations["enterprise-admin/delete-global-webhook"];
    /** Parameters that are not provided will be overwritten with the default value or removed if no default exists. */
    patch: operations["enterprise-admin/update-global-webhook"];
  };
  "/admin/hooks/{hook_id}/pings": {
    /** This will trigger a [ping event](https://docs.github.com/github-ae@latest/webhooks/#ping-event) to be sent to the webhook. */
    post: operations["enterprise-admin/ping-global-webhook"];
  };
  "/admin/keys": {
    get: operations["enterprise-admin/list-public-keys"];
  };
  "/admin/keys/{key_ids}": {
    delete: operations["enterprise-admin/delete-public-key"];
  };
  "/admin/organizations": {
    post: operations["enterprise-admin/create-org"];
  };
  "/admin/organizations/{org}": {
    patch: operations["enterprise-admin/update-org-name"];
  };
  "/admin/pre-receive-environments": {
    get: operations["enterprise-admin/list-pre-receive-environments"];
    post: operations["enterprise-admin/create-pre-receive-environment"];
  };
  "/admin/pre-receive-environments/{pre_receive_environment_id}": {
    get: operations["enterprise-admin/get-pre-receive-environment"];
    /**
     * If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.
     *
     * The possible error messages are:
     *
     * *   _Cannot modify or delete the default environment_
     * *   _Cannot delete environment that has hooks_
     * *   _Cannot delete environment when download is in progress_
     */
    delete: operations["enterprise-admin/delete-pre-receive-environment"];
    /** You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response. */
    patch: operations["enterprise-admin/update-pre-receive-environment"];
  };
  "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads": {
    /**
     * Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.
     *
     * If a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.
     *
     * The possible error messages are:
     *
     * * _Cannot modify or delete the default environment_
     * * _Can not start a new download when a download is in progress_
     */
    post: operations["enterprise-admin/start-pre-receive-environment-download"];
  };
  "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest": {
    /** In addition to seeing the download status at the "[Get a pre-receive environment](#get-a-pre-receive-environment)" endpoint, there is also this separate endpoint for just the download status. */
    get: operations["enterprise-admin/get-download-status-for-pre-receive-environment"];
  };
  "/admin/tokens": {
    /** Lists personal access tokens for all users, including admin users. */
    get: operations["enterprise-admin/list-personal-access-tokens"];
  };
  "/admin/tokens/{token_id}": {
    /** Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error. */
    delete: operations["enterprise-admin/delete-personal-access-token"];
  };
  "/admin/users/{username}": {
    /**
     * Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#suspend-a-user) is often a better option.
     *
     * You can delete any user account except your own.
     */
    delete: operations["enterprise-admin/delete-user"];
  };
  "/admin/users/{username}/authorizations": {
    post: operations["enterprise-admin/create-impersonation-o-auth-token"];
    delete: operations["enterprise-admin/delete-impersonation-o-auth-token"];
  };
  "/applications/{client_id}/grants/{access_token}": {
    /**
     * **Deprecation Notice:** GitHub AE will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
     *
     * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/github-ae@latest/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.
     *
     * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under "Authorized OAuth Apps" on GitHub AE](https://github.com/settings/applications#authorized).
     */
    delete: operations["apps/revoke-grant-for-application"];
  };
  "/applications/{client_id}/tokens/{access_token}": {
    /**
     * **Deprecation Notice:** GitHub AE will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
     *
     * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/github-ae@latest/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
     */
    get: operations["apps/check-authorization"];
    /**
     * **Deprecation Notice:** GitHub AE will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
     *
     * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/github-ae@latest/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
     */
    post: operations["apps/reset-authorization"];
    /**
     * **Deprecation Notice:** GitHub AE will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
     *
     * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/github-ae@latest/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
     */
    delete: operations["apps/revoke-authorization-for-application"];
  };
  "/enterprise/announcement": {
    /** Gets the current message and expiration date of the global announcement banner in your enterprise. */
    get: operations["enterprise-admin/get-announcement"];
    /** Removes the global announcement banner in your enterprise. */
    delete: operations["enterprise-admin/remove-announcement"];
    /** Sets the message and expiration time for the global announcement banner in your enterprise. */
    patch: operations["enterprise-admin/set-announcement"];
  };
  "/enterprise/settings/license": {
    get: operations["enterprise-admin/get-license-information"];
  };
  "/enterprise/stats/all": {
    get: operations["enterprise-admin/get-all-stats"];
  };
  "/enterprise/stats/comments": {
    get: operations["enterprise-admin/get-comment-stats"];
  };
  "/enterprise/stats/gists": {
    get: operations["enterprise-admin/get-all-stats"];
  };
  "/enterprise/stats/hooks": {
    get: operations["enterprise-admin/get-hooks-stats"];
  };
  "/enterprise/stats/issues": {
    get: operations["enterprise-admin/get-issue-stats"];
  };
  "/enterprise/stats/milestones": {
    get: operations["enterprise-admin/get-milestone-stats"];
  };
  "/enterprise/stats/orgs": {
    get: operations["enterprise-admin/get-org-stats"];
  };
  "/enterprise/stats/pages": {
    get: operations["enterprise-admin/get-pages-stats"];
  };
  "/enterprise/stats/pulls": {
    get: operations["enterprise-admin/get-pull-request-stats"];
  };
  "/enterprise/stats/repos": {
    get: operations["enterprise-admin/get-repo-stats"];
  };
  "/enterprise/stats/users": {
    get: operations["enterprise-admin/get-user-stats"];
  };
  "/repos/{owner}/{repo}": {
    /** **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/github-ae@latest/rest/reference/repos#replace-all-repository-topics) endpoint. */
    patch: operations["repos/update"];
  };
  "/repos/{owner}/{repo}/lfs": {
    put: operations["enterprise-admin/enable-lfs-for-repo"];
    delete: operations["enterprise-admin/disable-lfs-for-repo"];
  };
  "/repos/{owner}/{repo}/releases": {
    /**
     * Users with push access to the repository can create a release.
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/github-ae@latest/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
     */
    post: operations["repos/create-release"];
  };
  "/repos/{owner}/{repo}/releases/{release_id}": {
    /** Users with push access to the repository can edit a release. */
    patch: operations["repos/update-release"];
  };
  "/users/{username}/suspended": {
    /**
     * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.
     *
     * You can suspend any user account except your own.
     *
     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#http-verbs)."
     */
    put: operations["enterprise-admin/suspend-user"];
    /** If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API. */
    delete: operations["enterprise-admin/unsuspend-user"];
  };
}

export interface components {
  schemas: {
    "global-hook": {
      type?: string;
      id?: number;
      name?: string;
      active?: boolean;
      events?: string[];
      config?: {
        url?: string;
        content_type?: string;
        insecure_ssl?: string;
        secret?: string;
      };
      updated_at?: string;
      created_at?: string;
      url?: string;
      ping_url?: string;
    };
    "global-hook-2": {
      type?: string;
      id?: number;
      name?: string;
      active?: boolean;
      events?: string[];
      config?: {
        url?: string;
        content_type?: string;
        insecure_ssl?: string;
      };
      updated_at?: string;
      created_at?: string;
      url?: string;
      ping_url?: string;
    };
    "public-key-full": {
      id: number;
      key: string;
      user_id: number | null;
      repository_id: number | null;
      url: string;
      title: string;
      read_only: boolean;
      verified: boolean;
      created_at: string;
      last_used: string | null;
    };
    /** Organization Simple */
    "organization-simple": {
      login: string;
      id: number;
      node_id: string;
      url: string;
      repos_url: string;
      events_url: string;
      hooks_url: string;
      issues_url: string;
      members_url: string;
      public_members_url: string;
      avatar_url: string;
      description: string | null;
    };
    "pre-receive-environment": {
      id?: number;
      name?: string;
      image_url?: string;
      url?: string;
      html_url?: string;
      default_environment?: boolean;
      created_at?: string;
      hooks_count?: number;
      download?: {
        url?: string;
        state?: string;
        downloaded_at?: string | null;
        message?: string | null;
      };
    };
    "pre-receive-environment-download-status": {
      url?: string;
      state?: string;
      downloaded_at?: string | null;
      message?: string | null;
    };
    /** The authorization for an OAuth app, GitHub App, or a Personal Access Token. */
    authorization: {
      id: number;
      url: string;
      /** A list of scopes that this authorization is in. */
      scopes: string[] | null;
      token: string;
      token_last_eight: string | null;
      hashed_token: string | null;
      app: {
        client_id: string;
        name: string;
        url: string;
      };
      note: string | null;
      note_url: string | null;
      updated_at: string;
      created_at: string;
      fingerprint: string | null;
      user?: components["schemas"]["nullable-simple-user"];
      installation?: components["schemas"]["nullable-scoped-installation"];
      expires_at: string | null;
    };
    /** The authorization for an OAuth app, GitHub App, or a Personal Access Token. */
    "nullable-authorization": {
      id: number;
      url: string;
      /** A list of scopes that this authorization is in. */
      scopes: string[] | null;
      token: string;
      token_last_eight: string | null;
      hashed_token: string | null;
      app: {
        client_id: string;
        name: string;
        url: string;
      };
      note: string | null;
      note_url: string | null;
      updated_at: string;
      created_at: string;
      fingerprint: string | null;
      user?: components["schemas"]["nullable-simple-user"];
      installation?: components["schemas"]["nullable-scoped-installation"];
      expires_at: string | null;
    } | null;
    /** Enterprise global announcement */
    announcement: {
      announcement: components["schemas"]["announcement-message"];
      expires_at?: components["schemas"]["announcement-expiration"];
    };
    "license-info": {
      seats?: string | number;
      seats_used?: number;
      seats_available?: string | number;
      kind?: string;
      days_until_expiration?: number;
      expire_at?: string;
    };
    "enterprise-overview": {
      repos?: components["schemas"]["enterprise-repository-overview"];
      hooks?: components["schemas"]["enterprise-hook-overview"];
      pages?: components["schemas"]["enterprise-page-overview"];
      orgs?: components["schemas"]["enterprise-organization-overview"];
      users?: components["schemas"]["enterprise-user-overview"];
      pulls?: components["schemas"]["enterprise-pull-request-overview"];
      issues?: components["schemas"]["enterprise-issue-overview"];
      milestones?: components["schemas"]["enterprise-milestone-overview"];
      gists?: components["schemas"]["enterprise-gist-overview"];
      comments?: components["schemas"]["enterprise-comment-overview"];
    };
    "enterprise-comment-overview": {
      total_commit_comments: number;
      total_gist_comments: number;
      total_issue_comments: number;
      total_pull_request_comments: number;
    };
    "enterprise-gist-overview": {
      total_gists: number;
      private_gists: number;
      public_gists: number;
    };
    "enterprise-hook-overview": {
      total_hooks: number;
      active_hooks: number;
      inactive_hooks: number;
    };
    "enterprise-issue-overview": {
      total_issues: number;
      open_issues: number;
      closed_issues: number;
    };
    "enterprise-milestone-overview": {
      total_milestones: number;
      open_milestones: number;
      closed_milestones: number;
    };
    "enterprise-organization-overview": {
      total_orgs: number;
      disabled_orgs: number;
      total_teams: number;
      total_team_members: number;
    };
    "enterprise-page-overview": {
      total_pages: number;
    };
    "enterprise-pull-request-overview": {
      total_pulls: number;
      merged_pulls: number;
      mergeable_pulls: number;
      unmergeable_pulls: number;
    };
    "enterprise-repository-overview": {
      total_repos: number;
      root_repos: number;
      fork_repos: number;
      org_repos: number;
      total_pushes: number;
      total_wikis: number;
    };
    "enterprise-user-overview": {
      total_users: number;
      admin_users: number;
      suspended_users: number;
    };
    /** Full Repository */
    "full-repository": {
      id: number;
      node_id: string;
      name: string;
      full_name: string;
      owner: components["schemas"]["simple-user"];
      private: boolean;
      html_url: string;
      description: string | null;
      fork: boolean;
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      downloads_url: string;
      events_url: string;
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      clone_url: string;
      mirror_url: string | null;
      hooks_url: string;
      svn_url: string;
      homepage: string | null;
      language: string | null;
      forks_count: number;
      stargazers_count: number;
      watchers_count: number;
      size: number;
      default_branch: string;
      open_issues_count: number;
      is_template?: boolean;
      topics?: string[];
      has_issues: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      has_pages: boolean;
      has_downloads: boolean;
      archived: boolean;
      /** Returns whether or not this repository disabled. */
      disabled: boolean;
      /** The repository visibility: public, private, or internal. */
      visibility?: string;
      pushed_at: string;
      created_at: string;
      updated_at: string;
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        push: boolean;
        triage?: boolean;
        pull: boolean;
      };
      allow_rebase_merge?: boolean;
      template_repository?: components["schemas"]["nullable-repository"];
      temp_clone_token?: string | null;
      allow_squash_merge?: boolean;
      allow_auto_merge?: boolean;
      delete_branch_on_merge?: boolean;
      allow_merge_commit?: boolean;
      allow_forking?: boolean;
      subscribers_count: number;
      network_count: number;
      license: components["schemas"]["nullable-license-simple"];
      organization?: components["schemas"]["nullable-simple-user"];
      parent?: components["schemas"]["repository"];
      source?: components["schemas"]["repository"];
      forks: number;
      master_branch?: string;
      open_issues: number;
      watchers: number;
      /** Whether anonymous git access is allowed. */
      anonymous_access_enabled?: boolean;
      code_of_conduct?: components["schemas"]["code-of-conduct-simple"];
      security_and_analysis?: {
        advanced_security?: {
          status?: "enabled" | "disabled";
        };
        secret_scanning?: {
          status?: "enabled" | "disabled";
        };
      } | null;
    };
    /** A release. */
    release: {
      url: string;
      html_url: string;
      assets_url: string;
      upload_url: string;
      tarball_url: string | null;
      zipball_url: string | null;
      id: number;
      node_id: string;
      /** The name of the tag. */
      tag_name: string;
      /** Specifies the commitish value that determines where the Git tag is created from. */
      target_commitish: string;
      name: string | null;
      body?: string | null;
      /** true to create a draft (unpublished) release, false to create a published one. */
      draft: boolean;
      /** Whether to identify the release as a prerelease or a full release. */
      prerelease: boolean;
      created_at: string;
      published_at: string | null;
      author: components["schemas"]["simple-user"];
      assets: components["schemas"]["release-asset"][];
      body_html?: string;
      body_text?: string;
      mentions_count?: number;
      /** The URL of the release discussion. */
      discussion_url?: string;
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /** Simple User */
    "nullable-simple-user": {
      name?: string | null;
      email?: string | null;
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string | null;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
      starred_at?: string;
    } | null;
    "nullable-scoped-installation": {
      permissions: components["schemas"]["app-permissions"];
      /** Describe whether all repositories have been selected or there's a selection involved */
      repository_selection: "all" | "selected";
      single_file_name: string | null;
      has_multiple_single_files?: boolean;
      single_file_paths?: string[];
      repositories_url: string;
      account: components["schemas"]["simple-user"];
    } | null;
    /** The permissions granted to the user-to-server access token. */
    "app-permissions": {
      /** The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`. */
      actions?: "read" | "write";
      /** The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`. */
      administration?: "read" | "write";
      /** The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`. */
      checks?: "read" | "write";
      /** The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`. */
      content_references?: "read" | "write";
      /** The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`. */
      contents?: "read" | "write";
      /** The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`. */
      deployments?: "read" | "write";
      /** The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`. */
      environments?: "read" | "write";
      /** The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`. */
      issues?: "read" | "write";
      /** The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`. */
      metadata?: "read" | "write";
      /** The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`. */
      packages?: "read" | "write";
      /** The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`. */
      pages?: "read" | "write";
      /** The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`. */
      pull_requests?: "read" | "write";
      /** The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`. */
      repository_hooks?: "read" | "write";
      /** The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`. */
      repository_projects?: "read" | "write" | "admin";
      /** The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`. */
      secret_scanning_alerts?: "read" | "write";
      /** The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`. */
      secrets?: "read" | "write";
      /** The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`. */
      security_events?: "read" | "write";
      /** The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`. */
      single_file?: "read" | "write";
      /** The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`. */
      statuses?: "read" | "write";
      /** The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of: `read`. */
      vulnerability_alerts?: "read";
      /** The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`. */
      workflows?: "write";
      /** The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`. */
      members?: "read" | "write";
      /** The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`. */
      organization_administration?: "read" | "write";
      /** The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`. */
      organization_hooks?: "read" | "write";
      /** The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`. */
      organization_plan?: "read";
      /** The level of permission to grant the access token to manage organization projects, columns, and cards. Can be one of: `read`, `write`, or `admin`. */
      organization_projects?: "read" | "write" | "admin";
      /** The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`. */
      organization_packages?: "read" | "write";
      /** The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`. */
      organization_secrets?: "read" | "write";
      /** The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`. */
      organization_self_hosted_runners?: "read" | "write";
      /** The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`. */
      organization_user_blocking?: "read" | "write";
      /** The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`. */
      team_discussions?: "read" | "write";
    };
    /** Simple User */
    "simple-user": {
      name?: string | null;
      email?: string | null;
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string | null;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
      starred_at?: string;
    };
    /** Basic Error */
    "basic-error": {
      message?: string;
      documentation_url?: string;
      url?: string;
      status?: string;
    };
    /** The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see "[Mastering markdown](https://guides.github.com/features/mastering-markdown/)." */
    "announcement-message": string;
    /** The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string. */
    "announcement-expiration": string | null;
    /** A git repository */
    "nullable-repository": {
      /** Unique identifier of the repository */
      id: number;
      node_id: string;
      /** The name of the repository. */
      name: string;
      full_name: string;
      license: components["schemas"]["nullable-license-simple"];
      organization?: components["schemas"]["nullable-simple-user"];
      forks: number;
      permissions?: {
        admin: boolean;
        pull: boolean;
        triage?: boolean;
        push: boolean;
        maintain?: boolean;
      };
      owner: components["schemas"]["simple-user"];
      /** Whether the repository is private or public. */
      private: boolean;
      html_url: string;
      description: string | null;
      fork: boolean;
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      downloads_url: string;
      events_url: string;
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      clone_url: string;
      mirror_url: string | null;
      hooks_url: string;
      svn_url: string;
      homepage: string | null;
      language: string | null;
      forks_count: number;
      stargazers_count: number;
      watchers_count: number;
      size: number;
      /** The default branch of the repository. */
      default_branch: string;
      open_issues_count: number;
      /** Whether this repository acts as a template that can be used to generate new repositories. */
      is_template?: boolean;
      topics?: string[];
      /** Whether issues are enabled. */
      has_issues: boolean;
      /** Whether projects are enabled. */
      has_projects: boolean;
      /** Whether the wiki is enabled. */
      has_wiki: boolean;
      has_pages: boolean;
      /** Whether downloads are enabled. */
      has_downloads: boolean;
      /** Whether the repository is archived. */
      archived: boolean;
      /** Returns whether or not this repository disabled. */
      disabled: boolean;
      /** The repository visibility: public, private, or internal. */
      visibility?: string;
      pushed_at: string | null;
      created_at: string | null;
      updated_at: string | null;
      /** Whether to allow rebase merges for pull requests. */
      allow_rebase_merge?: boolean;
      template_repository?: {
        id?: number;
        node_id?: string;
        name?: string;
        full_name?: string;
        owner?: {
          login?: string;
          id?: number;
          node_id?: string;
          avatar_url?: string;
          gravatar_id?: string;
          url?: string;
          html_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          starred_url?: string;
          subscriptions_url?: string;
          organizations_url?: string;
          repos_url?: string;
          events_url?: string;
          received_events_url?: string;
          type?: string;
          site_admin?: boolean;
        };
        private?: boolean;
        html_url?: string;
        description?: string;
        fork?: boolean;
        url?: string;
        archive_url?: string;
        assignees_url?: string;
        blobs_url?: string;
        branches_url?: string;
        collaborators_url?: string;
        comments_url?: string;
        commits_url?: string;
        compare_url?: string;
        contents_url?: string;
        contributors_url?: string;
        deployments_url?: string;
        downloads_url?: string;
        events_url?: string;
        forks_url?: string;
        git_commits_url?: string;
        git_refs_url?: string;
        git_tags_url?: string;
        git_url?: string;
        issue_comment_url?: string;
        issue_events_url?: string;
        issues_url?: string;
        keys_url?: string;
        labels_url?: string;
        languages_url?: string;
        merges_url?: string;
        milestones_url?: string;
        notifications_url?: string;
        pulls_url?: string;
        releases_url?: string;
        ssh_url?: string;
        stargazers_url?: string;
        statuses_url?: string;
        subscribers_url?: string;
        subscription_url?: string;
        tags_url?: string;
        teams_url?: string;
        trees_url?: string;
        clone_url?: string;
        mirror_url?: string;
        hooks_url?: string;
        svn_url?: string;
        homepage?: string;
        language?: string;
        forks_count?: number;
        stargazers_count?: number;
        watchers_count?: number;
        size?: number;
        default_branch?: string;
        open_issues_count?: number;
        is_template?: boolean;
        topics?: string[];
        has_issues?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        has_pages?: boolean;
        has_downloads?: boolean;
        archived?: boolean;
        disabled?: boolean;
        visibility?: string;
        pushed_at?: string;
        created_at?: string;
        updated_at?: string;
        permissions?: {
          admin?: boolean;
          maintain?: boolean;
          push?: boolean;
          triage?: boolean;
          pull?: boolean;
        };
        allow_rebase_merge?: boolean;
        temp_clone_token?: string;
        allow_squash_merge?: boolean;
        allow_auto_merge?: boolean;
        delete_branch_on_merge?: boolean;
        allow_merge_commit?: boolean;
        subscribers_count?: number;
        network_count?: number;
      } | null;
      temp_clone_token?: string;
      /** Whether to allow squash merges for pull requests. */
      allow_squash_merge?: boolean;
      /** Whether to allow Auto-merge to be used on pull requests. */
      allow_auto_merge?: boolean;
      /** Whether to delete head branches when pull requests are merged */
      delete_branch_on_merge?: boolean;
      /** Whether to allow merge commits for pull requests. */
      allow_merge_commit?: boolean;
      /** Whether to allow forking this repo */
      allow_forking?: boolean;
      subscribers_count?: number;
      network_count?: number;
      open_issues: number;
      watchers: number;
      master_branch?: string;
      starred_at?: string;
    } | null;
    /** License Simple */
    "nullable-license-simple": {
      key: string;
      name: string;
      url: string | null;
      spdx_id: string | null;
      node_id: string;
      html_url?: string;
    } | null;
    /** A git repository */
    repository: {
      /** Unique identifier of the repository */
      id: number;
      node_id: string;
      /** The name of the repository. */
      name: string;
      full_name: string;
      license: components["schemas"]["nullable-license-simple"];
      organization?: components["schemas"]["nullable-simple-user"];
      forks: number;
      permissions?: {
        admin: boolean;
        pull: boolean;
        triage?: boolean;
        push: boolean;
        maintain?: boolean;
      };
      owner: components["schemas"]["simple-user"];
      /** Whether the repository is private or public. */
      private: boolean;
      html_url: string;
      description: string | null;
      fork: boolean;
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      downloads_url: string;
      events_url: string;
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      clone_url: string;
      mirror_url: string | null;
      hooks_url: string;
      svn_url: string;
      homepage: string | null;
      language: string | null;
      forks_count: number;
      stargazers_count: number;
      watchers_count: number;
      size: number;
      /** The default branch of the repository. */
      default_branch: string;
      open_issues_count: number;
      /** Whether this repository acts as a template that can be used to generate new repositories. */
      is_template?: boolean;
      topics?: string[];
      /** Whether issues are enabled. */
      has_issues: boolean;
      /** Whether projects are enabled. */
      has_projects: boolean;
      /** Whether the wiki is enabled. */
      has_wiki: boolean;
      has_pages: boolean;
      /** Whether downloads are enabled. */
      has_downloads: boolean;
      /** Whether the repository is archived. */
      archived: boolean;
      /** Returns whether or not this repository disabled. */
      disabled: boolean;
      /** The repository visibility: public, private, or internal. */
      visibility?: string;
      pushed_at: string | null;
      created_at: string | null;
      updated_at: string | null;
      /** Whether to allow rebase merges for pull requests. */
      allow_rebase_merge?: boolean;
      template_repository?: {
        id?: number;
        node_id?: string;
        name?: string;
        full_name?: string;
        owner?: {
          login?: string;
          id?: number;
          node_id?: string;
          avatar_url?: string;
          gravatar_id?: string;
          url?: string;
          html_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          starred_url?: string;
          subscriptions_url?: string;
          organizations_url?: string;
          repos_url?: string;
          events_url?: string;
          received_events_url?: string;
          type?: string;
          site_admin?: boolean;
        };
        private?: boolean;
        html_url?: string;
        description?: string;
        fork?: boolean;
        url?: string;
        archive_url?: string;
        assignees_url?: string;
        blobs_url?: string;
        branches_url?: string;
        collaborators_url?: string;
        comments_url?: string;
        commits_url?: string;
        compare_url?: string;
        contents_url?: string;
        contributors_url?: string;
        deployments_url?: string;
        downloads_url?: string;
        events_url?: string;
        forks_url?: string;
        git_commits_url?: string;
        git_refs_url?: string;
        git_tags_url?: string;
        git_url?: string;
        issue_comment_url?: string;
        issue_events_url?: string;
        issues_url?: string;
        keys_url?: string;
        labels_url?: string;
        languages_url?: string;
        merges_url?: string;
        milestones_url?: string;
        notifications_url?: string;
        pulls_url?: string;
        releases_url?: string;
        ssh_url?: string;
        stargazers_url?: string;
        statuses_url?: string;
        subscribers_url?: string;
        subscription_url?: string;
        tags_url?: string;
        teams_url?: string;
        trees_url?: string;
        clone_url?: string;
        mirror_url?: string;
        hooks_url?: string;
        svn_url?: string;
        homepage?: string;
        language?: string;
        forks_count?: number;
        stargazers_count?: number;
        watchers_count?: number;
        size?: number;
        default_branch?: string;
        open_issues_count?: number;
        is_template?: boolean;
        topics?: string[];
        has_issues?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        has_pages?: boolean;
        has_downloads?: boolean;
        archived?: boolean;
        disabled?: boolean;
        visibility?: string;
        pushed_at?: string;
        created_at?: string;
        updated_at?: string;
        permissions?: {
          admin?: boolean;
          maintain?: boolean;
          push?: boolean;
          triage?: boolean;
          pull?: boolean;
        };
        allow_rebase_merge?: boolean;
        temp_clone_token?: string;
        allow_squash_merge?: boolean;
        allow_auto_merge?: boolean;
        delete_branch_on_merge?: boolean;
        allow_merge_commit?: boolean;
        subscribers_count?: number;
        network_count?: number;
      } | null;
      temp_clone_token?: string;
      /** Whether to allow squash merges for pull requests. */
      allow_squash_merge?: boolean;
      /** Whether to allow Auto-merge to be used on pull requests. */
      allow_auto_merge?: boolean;
      /** Whether to delete head branches when pull requests are merged */
      delete_branch_on_merge?: boolean;
      /** Whether to allow merge commits for pull requests. */
      allow_merge_commit?: boolean;
      /** Whether to allow forking this repo */
      allow_forking?: boolean;
      subscribers_count?: number;
      network_count?: number;
      open_issues: number;
      watchers: number;
      master_branch?: string;
      starred_at?: string;
    };
    /** Code of Conduct Simple */
    "code-of-conduct-simple": {
      url: string;
      key: string;
      name: string;
      html_url: string | null;
    };
    /** Validation Error */
    "validation-error": {
      message: string;
      documentation_url: string;
      errors?: {
        resource?: string;
        field?: string;
        message?: string;
        code: string;
        index?: number;
        value?: (string | null) | (number | null) | (string[] | null);
      }[];
    };
    /** Data related to a release. */
    "release-asset": {
      url: string;
      browser_download_url: string;
      id: number;
      node_id: string;
      /** The file name of the asset. */
      name: string;
      label: string | null;
      /** State of the release asset. */
      state: "uploaded" | "open";
      content_type: string;
      size: number;
      download_count: number;
      created_at: string;
      updated_at: string;
      uploader: components["schemas"]["nullable-simple-user"];
    };
    "reaction-rollup": {
      url: string;
      total_count: number;
      "+1": number;
      "-1": number;
      laugh: number;
      confused: number;
      heart: number;
      hooray: number;
      eyes: number;
      rocket: number;
    };
  };
  responses: {
    /** Resource not found */
    not_found: {
      content: {
        "application/json": components["schemas"]["basic-error"];
      };
    };
    /** Temporary Redirect */
    temporary_redirect: {
      content: {
        "application/json": components["schemas"]["basic-error"];
      };
    };
    /** Forbidden */
    forbidden: {
      content: {
        "application/json": components["schemas"]["basic-error"];
      };
    };
    /** Validation failed */
    validation_failed: {
      content: {
        "application/json": components["schemas"]["validation-error"];
      };
    };
    /** Accepted */
    accepted: {
      content: {
        "application/json": { [key: string]: unknown };
      };
    };
  };
  parameters: {
    /** Results per page (max 100) */
    "per-page": number;
    /** Page number of the results to fetch. */
    page: number;
    "hook-id": number;
    /** One of `asc` (ascending) or `desc` (descending). */
    direction: "asc" | "desc";
    "key-ids": string;
    org: string;
    "pre-receive-environment-id": number;
    "token-id": number;
    username: string;
    /** The client ID of your GitHub app. */
    "client-id": string;
    "access-token": string;
    owner: string;
    repo: string;
    /** release_id parameter */
    "release-id": number;
  };
  headers: {
    link?: string;
  };
}

export interface operations {
  "enterprise-admin/list-global-webhooks": {
    parameters: {
      header: {
        /** This API is under preview and subject to change. */
        accept: string;
      };
      query: {
        /** Results per page (max 100) */
        per_page?: components["parameters"]["per-page"];
        /** Page number of the results to fetch. */
        page?: components["parameters"]["page"];
      };
    };
    responses: {
      /** Response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["global-hook"][];
        };
      };
    };
  };
  "enterprise-admin/create-global-webhook": {
    parameters: {
      header: {
        /** This API is under preview and subject to change. */
        accept: string;
      };
    };
    responses: {
      /** Response */
      201: {
        content: {
          "application/json": components["schemas"]["global-hook"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Must be passed as "web". */
          name: string;
          /** Key/value pairs to provide settings for this webhook. */
          config: {
            /** The URL to which the payloads will be delivered. */
            url: string;
            /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
            content_type?: string;
            /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/github-ae@latest/webhooks/event-payloads/#delivery-headers) header. */
            secret?: string;
            /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
            insecure_ssl?: string;
          };
          /** The [events](https://docs.github.com/github-ae@latest/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`. */
          events?: string[];
          /** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
          active?: boolean;
        };
      };
    };
  };
  "enterprise-admin/get-global-webhook": {
    parameters: {
      header: {
        /** This API is under preview and subject to change. */
        accept: string;
      };
      path: {
        hook_id: components["parameters"]["hook-id"];
      };
    };
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["global-hook"];
        };
      };
    };
  };
  "enterprise-admin/delete-global-webhook": {
    parameters: {
      header: {
        /** This API is under preview and subject to change. */
        accept: string;
      };
      path: {
        hook_id: components["parameters"]["hook-id"];
      };
    };
    responses: {
      /** Response */
      204: never;
    };
  };
  /** Parameters that are not provided will be overwritten with the default value or removed if no default exists. */
  "enterprise-admin/update-global-webhook": {
    parameters: {
      header: {
        /** This API is under preview and subject to change. */
        accept: string;
      };
      path: {
        hook_id: components["parameters"]["hook-id"];
      };
    };
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["global-hook-2"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Key/value pairs to provide settings for this webhook. */
          config?: {
            /** The URL to which the payloads will be delivered. */
            url: string;
            /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
            content_type?: string;
            /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/github-ae@latest/webhooks/event-payloads/#delivery-headers) header. */
            secret?: string;
            /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
            insecure_ssl?: string;
          };
          /** The [events](https://docs.github.com/github-ae@latest/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`. */
          events?: string[];
          /** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
          active?: boolean;
        };
      };
    };
  };
  /** This will trigger a [ping event](https://docs.github.com/github-ae@latest/webhooks/#ping-event) to be sent to the webhook. */
  "enterprise-admin/ping-global-webhook": {
    parameters: {
      header: {
        /** This API is under preview and subject to change. */
        accept: string;
      };
      path: {
        hook_id: components["parameters"]["hook-id"];
      };
    };
    responses: {
      /** Response */
      204: never;
    };
  };
  "enterprise-admin/list-public-keys": {
    parameters: {
      query: {
        /** Results per page (max 100) */
        per_page?: components["parameters"]["per-page"];
        /** Page number of the results to fetch. */
        page?: components["parameters"]["page"];
        /** One of `asc` (ascending) or `desc` (descending). */
        direction?: components["parameters"]["direction"];
        sort?: "created" | "updated" | "accessed";
        /** Only show public keys accessed after the given time. */
        since?: string;
      };
    };
    responses: {
      /** Response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["public-key-full"][];
        };
      };
    };
  };
  "enterprise-admin/delete-public-key": {
    parameters: {
      path: {
        key_ids: components["parameters"]["key-ids"];
      };
    };
    responses: {
      /** Response */
      204: never;
    };
  };
  "enterprise-admin/create-org": {
    responses: {
      /** Response */
      201: {
        content: {
          "application/json": components["schemas"]["organization-simple"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** The organization's username. */
          login: string;
          /** The login of the user who will manage this organization. */
          admin: string;
          /** The organization's display name. */
          profile_name?: string;
        };
      };
    };
  };
  "enterprise-admin/update-org-name": {
    parameters: {
      path: {
        org: components["parameters"]["org"];
      };
    };
    responses: {
      /** Response */
      202: {
        content: {
          "application/json": {
            message?: string;
            url?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** The organization's new name. */
          login: string;
        };
      };
    };
  };
  "enterprise-admin/list-pre-receive-environments": {
    parameters: {
      query: {
        /** Results per page (max 100) */
        per_page?: components["parameters"]["per-page"];
        /** Page number of the results to fetch. */
        page?: components["parameters"]["page"];
        /** One of `asc` (ascending) or `desc` (descending). */
        direction?: components["parameters"]["direction"];
        sort?: "created" | "updated" | "name";
      };
    };
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["pre-receive-environment"][];
        };
      };
    };
  };
  "enterprise-admin/create-pre-receive-environment": {
    responses: {
      /** Response */
      201: {
        content: {
          "application/json": components["schemas"]["pre-receive-environment"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** The new pre-receive environment's name. */
          name: string;
          /** URL from which to download a tarball of this environment. */
          image_url: string;
        };
      };
    };
  };
  "enterprise-admin/get-pre-receive-environment": {
    parameters: {
      path: {
        pre_receive_environment_id: components["parameters"]["pre-receive-environment-id"];
      };
    };
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["pre-receive-environment"];
        };
      };
    };
  };
  /**
   * If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.
   *
   * The possible error messages are:
   *
   * *   _Cannot modify or delete the default environment_
   * *   _Cannot delete environment that has hooks_
   * *   _Cannot delete environment when download is in progress_
   */
  "enterprise-admin/delete-pre-receive-environment": {
    parameters: {
      path: {
        pre_receive_environment_id: components["parameters"]["pre-receive-environment-id"];
      };
    };
    responses: {
      /** Response */
      204: never;
      /** Client Errors */
      422: {
        content: {
          "application/json": {
            message?: string;
            errors?: {
              resource?: string;
              code?: string;
              message?: string;
            }[];
          };
        };
      };
    };
  };
  /** You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response. */
  "enterprise-admin/update-pre-receive-environment": {
    parameters: {
      path: {
        pre_receive_environment_id: components["parameters"]["pre-receive-environment-id"];
      };
    };
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["pre-receive-environment"];
        };
      };
      /** Client Errors */
      422: {
        content: {
          "application/json": {
            message?: string;
            errors?: {
              resource?: string;
              code?: string;
              message?: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** This pre-receive environment's new name. */
          name?: string;
          /** URL from which to download a tarball of this environment. */
          image_url?: string;
        };
      };
    };
  };
  /**
   * Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.
   *
   * If a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.
   *
   * The possible error messages are:
   *
   * * _Cannot modify or delete the default environment_
   * * _Can not start a new download when a download is in progress_
   */
  "enterprise-admin/start-pre-receive-environment-download": {
    parameters: {
      path: {
        pre_receive_environment_id: components["parameters"]["pre-receive-environment-id"];
      };
    };
    responses: {
      /** Response */
      202: {
        content: {
          "application/json": components["schemas"]["pre-receive-environment-download-status"];
        };
      };
      /** Client Errors */
      422: {
        content: {
          "application/json": {
            message?: string;
            errors?: {
              resource?: string;
              code?: string;
              message?: string;
            }[];
          };
        };
      };
    };
  };
  /** In addition to seeing the download status at the "[Get a pre-receive environment](#get-a-pre-receive-environment)" endpoint, there is also this separate endpoint for just the download status. */
  "enterprise-admin/get-download-status-for-pre-receive-environment": {
    parameters: {
      path: {
        pre_receive_environment_id: components["parameters"]["pre-receive-environment-id"];
      };
    };
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["pre-receive-environment-download-status"];
        };
      };
    };
  };
  /** Lists personal access tokens for all users, including admin users. */
  "enterprise-admin/list-personal-access-tokens": {
    parameters: {
      query: {
        /** Results per page (max 100) */
        per_page?: components["parameters"]["per-page"];
        /** Page number of the results to fetch. */
        page?: components["parameters"]["page"];
      };
    };
    responses: {
      /** Response */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["authorization"][];
        };
      };
    };
  };
  /** Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error. */
  "enterprise-admin/delete-personal-access-token": {
    parameters: {
      path: {
        token_id: components["parameters"]["token-id"];
      };
    };
    responses: {
      /** Response */
      204: never;
    };
  };
  /**
   * Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/github-ae@latest/rest/reference/enterprise-admin#suspend-a-user) is often a better option.
   *
   * You can delete any user account except your own.
   */
  "enterprise-admin/delete-user": {
    parameters: {
      path: {
        username: components["parameters"]["username"];
      };
    };
    responses: {
      /** Response */
      204: never;
    };
  };
  "enterprise-admin/create-impersonation-o-auth-token": {
    parameters: {
      path: {
        username: components["parameters"]["username"];
      };
    };
    responses: {
      /** Response */
      201: {
        content: {
          "application/json": components["schemas"]["authorization"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** A list of [scopes](https://docs.github.com/github-ae@latest/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
          scopes?: string[];
        };
      };
    };
  };
  "enterprise-admin/delete-impersonation-o-auth-token": {
    parameters: {
      path: {
        username: components["parameters"]["username"];
      };
    };
    responses: {
      /** Response */
      204: never;
    };
  };
  /**
   * **Deprecation Notice:** GitHub AE will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
   *
   * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/github-ae@latest/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.
   *
   * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under "Authorized OAuth Apps" on GitHub AE](https://github.com/settings/applications#authorized).
   */
  "apps/revoke-grant-for-application": {
    parameters: {
      path: {
        /** The client ID of your GitHub app. */
        client_id: components["parameters"]["client-id"];
        access_token: components["parameters"]["access-token"];
      };
    };
    responses: {
      /** Response */
      204: never;
    };
  };
  /**
   * **Deprecation Notice:** GitHub AE will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
   *
   * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/github-ae@latest/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
   */
  "apps/check-authorization": {
    parameters: {
      path: {
        /** The client ID of your GitHub app. */
        client_id: components["parameters"]["client-id"];
        access_token: components["parameters"]["access-token"];
      };
    };
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["nullable-authorization"];
        };
      };
      404: components["responses"]["not_found"];
    };
  };
  /**
   * **Deprecation Notice:** GitHub AE will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
   *
   * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/github-ae@latest/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
   */
  "apps/reset-authorization": {
    parameters: {
      path: {
        /** The client ID of your GitHub app. */
        client_id: components["parameters"]["client-id"];
        access_token: components["parameters"]["access-token"];
      };
    };
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["authorization"];
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** GitHub AE will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
   *
   * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/github-ae@latest/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
   */
  "apps/revoke-authorization-for-application": {
    parameters: {
      path: {
        /** The client ID of your GitHub app. */
        client_id: components["parameters"]["client-id"];
        access_token: components["parameters"]["access-token"];
      };
    };
    responses: {
      /** Response */
      204: never;
    };
  };
  /** Gets the current message and expiration date of the global announcement banner in your enterprise. */
  "enterprise-admin/get-announcement": {
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["announcement"];
        };
      };
    };
  };
  /** Removes the global announcement banner in your enterprise. */
  "enterprise-admin/remove-announcement": {
    responses: {
      /** Response */
      204: never;
    };
  };
  /** Sets the message and expiration time for the global announcement banner in your enterprise. */
  "enterprise-admin/set-announcement": {
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["announcement"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["announcement"];
      };
    };
  };
  "enterprise-admin/get-license-information": {
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["license-info"];
        };
      };
    };
  };
  "enterprise-admin/get-all-stats": {
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["enterprise-gist-overview"];
        };
      };
    };
  };
  "enterprise-admin/get-comment-stats": {
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["enterprise-comment-overview"];
        };
      };
    };
  };
  "enterprise-admin/get-hooks-stats": {
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["enterprise-hook-overview"];
        };
      };
    };
  };
  "enterprise-admin/get-issue-stats": {
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["enterprise-issue-overview"];
        };
      };
    };
  };
  "enterprise-admin/get-milestone-stats": {
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["enterprise-milestone-overview"];
        };
      };
    };
  };
  "enterprise-admin/get-org-stats": {
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["enterprise-organization-overview"];
        };
      };
    };
  };
  "enterprise-admin/get-pages-stats": {
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["enterprise-page-overview"];
        };
      };
    };
  };
  "enterprise-admin/get-pull-request-stats": {
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["enterprise-pull-request-overview"];
        };
      };
    };
  };
  "enterprise-admin/get-repo-stats": {
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["enterprise-repository-overview"];
        };
      };
    };
  };
  "enterprise-admin/get-user-stats": {
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["enterprise-user-overview"];
        };
      };
    };
  };
  /** **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/github-ae@latest/rest/reference/repos#replace-all-repository-topics) endpoint. */
  "repos/update": {
    parameters: {
      path: {
        owner: components["parameters"]["owner"];
        repo: components["parameters"]["repo"];
      };
    };
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["full-repository"];
        };
      };
      307: components["responses"]["temporary_redirect"];
      403: components["responses"]["forbidden"];
      404: components["responses"]["not_found"];
      422: components["responses"]["validation_failed"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** The name of the repository. */
          name?: string;
          /** A short description of the repository. */
          description?: string;
          /** A URL with more information about the repository. */
          homepage?: string;
          /**
           * Either `true` to make the repository private or `false` to make it public. Default: `false`.
           * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
           */
          private?: boolean;
          /** Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. The `visibility` parameter overrides the `private` parameter when you use both along with the `nebula-preview` preview header. */
          visibility?: "public" | "private" | "visibility" | "internal";
          /** Either `true` to enable issues for this repository or `false` to disable them. */
          has_issues?: boolean;
          /** Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error. */
          has_projects?: boolean;
          /** Either `true` to enable the wiki for this repository or `false` to disable it. */
          has_wiki?: boolean;
          /** Either `true` to make this repo available as a template repository or `false` to prevent it. */
          is_template?: boolean;
          /** Updates the default branch for this repository. */
          default_branch?: string;
          /** Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. */
          allow_squash_merge?: boolean;
          /** Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. */
          allow_merge_commit?: boolean;
          /** Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. */
          allow_rebase_merge?: boolean;
          /** Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge. */
          allow_auto_merge?: boolean;
          /** Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. */
          delete_branch_on_merge?: boolean;
          /** `true` to archive this repository. **Note**: You cannot unarchive repositories through the API. */
          archived?: boolean;
          /** Either `true` to allow private forks, or `false` to prevent private forks. */
          allow_forking?: boolean;
        };
      };
    };
  };
  "enterprise-admin/enable-lfs-for-repo": {
    parameters: {
      path: {
        owner: components["parameters"]["owner"];
        repo: components["parameters"]["repo"];
      };
    };
    responses: {
      202: components["responses"]["accepted"];
      /**
       * We will return a 403 with one of the following messages:
       *
       * - Git LFS support not enabled because Git LFS is globally disabled.
       * - Git LFS support not enabled because Git LFS is disabled for the root repository in the network.
       * - Git LFS support not enabled because Git LFS is disabled for <owner>.
       */
      403: unknown;
    };
  };
  "enterprise-admin/disable-lfs-for-repo": {
    parameters: {
      path: {
        owner: components["parameters"]["owner"];
        repo: components["parameters"]["repo"];
      };
    };
    responses: {
      /** Response */
      204: never;
    };
  };
  /**
   * Users with push access to the repository can create a release.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/github-ae@latest/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   */
  "repos/create-release": {
    parameters: {
      path: {
        owner: components["parameters"]["owner"];
        repo: components["parameters"]["repo"];
      };
    };
    responses: {
      /** Response */
      201: {
        headers: {
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["release"];
        };
      };
      422: components["responses"]["validation_failed"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** The name of the tag. */
          tag_name: string;
          /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */
          target_commitish?: string;
          /** The name of the release. */
          name?: string;
          /** Text describing the contents of the tag. */
          body?: string;
          /** `true` to create a draft (unpublished) release, `false` to create a published one. */
          draft?: boolean;
          /** `true` to identify the release as a prerelease. `false` to identify the release as a full release. */
          prerelease?: boolean;
        };
      };
    };
  };
  /** Users with push access to the repository can edit a release. */
  "repos/update-release": {
    parameters: {
      path: {
        owner: components["parameters"]["owner"];
        repo: components["parameters"]["repo"];
        /** release_id parameter */
        release_id: components["parameters"]["release-id"];
      };
    };
    responses: {
      /** Response */
      200: {
        content: {
          "application/json": components["schemas"]["release"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** The name of the tag. */
          tag_name?: string;
          /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */
          target_commitish?: string;
          /** The name of the release. */
          name?: string;
          /** Text describing the contents of the tag. */
          body?: string;
          /** `true` makes the release a draft, and `false` publishes the release. */
          draft?: boolean;
          /** `true` to identify the release as a prerelease, `false` to identify the release as a full release. */
          prerelease?: boolean;
        };
      };
    };
  };
  /**
   * If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.
   *
   * You can suspend any user account except your own.
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/github-ae@latest/rest/overview/resources-in-the-rest-api#http-verbs)."
   */
  "enterprise-admin/suspend-user": {
    parameters: {
      path: {
        username: components["parameters"]["username"];
      };
    };
    responses: {
      /** Response */
      204: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** The reason the user is being suspended. This message will be logged in the [audit log](https://help.github.com/enterprise/admin/articles/audit-logging/). If you don't provide a `reason`, it will default to "Suspended via API by _SITE\_ADMINISTRATOR_", where _SITE\_ADMINISTRATOR_ is the person who performed the action. */
          reason?: string;
        } | null;
      };
    };
  };
  /** If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://help.github.com/enterprise/admin/guides/user-management/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API. */
  "enterprise-admin/unsuspend-user": {
    parameters: {
      path: {
        username: components["parameters"]["username"];
      };
    };
    responses: {
      /** Response */
      204: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** The reason the user is being unsuspended. This message will be logged in the [audit log](https://help.github.com/enterprise/admin/articles/audit-logging/). If you don't provide a `reason`, it will default to "Unsuspended via API by _SITE\_ADMINISTRATOR_", where _SITE\_ADMINISTRATOR_ is the person who performed the action. */
          reason?: string;
        } | null;
      };
    };
  };
}

export interface external {}
